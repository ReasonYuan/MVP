//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/liaomin/Documents/workspace/Android/DocPlusLogic/src/com/fq/lib/json/JSONArray.java
//
//  Created by liaomin on 15-5-4.
//

#line 1 "/Users/liaomin/Documents/workspace/Android/DocPlusLogic/src/com/fq/lib/json/JSONArray.java"

#include "IOSClass.h"
#include "JSON.h"
#include "JSONArray.h"
#include "JSONException.h"
#include "JSONObject.h"
#include "JSONStringer.h"
#include "JSONTokener.h"
#include "java/lang/Boolean.h"
#include "java/lang/Double.h"
#include "java/lang/IndexOutOfBoundsException.h"
#include "java/lang/Integer.h"
#include "java/lang/Long.h"
#include "java/lang/Math.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/reflect/Array.h"
#include "java/util/ArrayList.h"
#include "java/util/Collection.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"


#line 50
@implementation FQJSONArray


#line 57
- (id)initFQJSONArray {
  if (self = [super init]) {
    
#line 58
    values_ = [[JavaUtilArrayList alloc] init];
  }
  return self;
}

- (id)init {
  return [self initFQJSONArray];
}

- (id)initWithJavaUtilCollection:(id<JavaUtilCollection>)copyFrom {
  if (self =
#line 71
  [self initFQJSONArray]) {
    
#line 72
    if (copyFrom != nil) {
      for (id<JavaUtilIterator> it = [copyFrom iterator]; [((id<JavaUtilIterator>) nil_chk(it)) hasNext]; ) {
        (void) [self putWithId:[FQJSONObject wrapWithId:[it next]]];
      }
    }
  }
  return self;
}


#line 88
- (id)initFQJSONArrayWithFQJSONTokener:(FQJSONTokener *)readFrom {
  if (self = [super init]) {
    
#line 93
    id object = [((FQJSONTokener *) nil_chk(readFrom)) nextValue];
    
#line 94
    if ([object isKindOfClass:[FQJSONArray class]]) {
      values_ = ((FQJSONArray *) nil_chk(((FQJSONArray *) check_class_cast(object, [FQJSONArray class]))))->values_;
    }
    else {
      
#line 97
      @throw [FQJSON typeMismatchWithId:object withNSString:@"JSONArray"];
    }
  }
  return self;
}

- (id)initWithFQJSONTokener:(FQJSONTokener *)readFrom {
  return [self initFQJSONArrayWithFQJSONTokener:readFrom];
}


#line 108
- (id)initWithNSString:(NSString *)json {
  return
#line 109
  [self initFQJSONArrayWithFQJSONTokener:[[FQJSONTokener alloc] initWithNSString:json]];
}


#line 115
- (id)initWithId:(id)array {
  if (self = [super init]) {
    
#line 116
    if (![[nil_chk(array) getClass] isArray]) {
      @throw [[FQJSONException alloc] initWithNSString:[NSString stringWithFormat:@"Not a primitive array: %@", [array getClass]]];
    }
    
#line 119
    int length = [JavaLangReflectArray getLengthWithId:array];
    
#line 120
    values_ = [[JavaUtilArrayList alloc] initWithInt:length];
    
#line 121
    for (int i = 0; i < length; ++i) {
      (void) [self putWithId:[FQJSONObject wrapWithId:[JavaLangReflectArray getWithId:array withInt:i]]];
    }
  }
  return self;
}


#line 129
- (int)length {
  
#line 130
  return [((id<JavaUtilList>) nil_chk(values_)) size];
}


#line 138
- (FQJSONArray *)putWithBoolean:(BOOL)value {
  
#line 139
  [((id<JavaUtilList>) nil_chk(values_)) addWithId:[JavaLangBoolean valueOfWithBoolean:value]];
  return self;
}


#line 150
- (FQJSONArray *)putWithDouble:(double)value {
  
#line 151
  [((id<JavaUtilList>) nil_chk(values_)) addWithId:[JavaLangDouble valueOfWithDouble:[FQJSON checkDoubleWithDouble:value]]];
  return self;
}


#line 160
- (FQJSONArray *)putWithInt:(int)value {
  
#line 161
  [((id<JavaUtilList>) nil_chk(values_)) addWithId:[JavaLangInteger valueOfWithInt:value]];
  return self;
}


#line 170
- (FQJSONArray *)putWithLong:(long long int)value {
  
#line 171
  [((id<JavaUtilList>) nil_chk(values_)) addWithId:[JavaLangLong valueOfWithLong:value]];
  return self;
}


#line 185
- (FQJSONArray *)putWithId:(id)value {
  
#line 186
  [((id<JavaUtilList>) nil_chk(values_)) addWithId:value];
  return self;
}


#line 197
- (FQJSONArray *)putWithInt:(int)index
                withBoolean:(BOOL)value {
  
#line 198
  return [self putWithInt:index withId:[JavaLangBoolean valueOfWithBoolean:value]];
}


#line 210
- (FQJSONArray *)putWithInt:(int)index
                 withDouble:(double)value {
  
#line 211
  return [self putWithInt:index withId:[JavaLangDouble valueOfWithDouble:value]];
}


#line 221
- (FQJSONArray *)putWithInt:(int)index
                    withInt:(int)value {
  
#line 222
  return [self putWithInt:index withId:[JavaLangInteger valueOfWithInt:value]];
}


#line 232
- (FQJSONArray *)putWithInt:(int)index
                   withLong:(long long int)value {
  
#line 233
  return [self putWithInt:index withId:[JavaLangLong valueOfWithLong:value]];
}


#line 247
- (FQJSONArray *)putWithInt:(int)index
                     withId:(id)value {
  
#line 248
  if ([value isKindOfClass:[NSNumber class]]) {
    
#line 250
    [FQJSON checkDoubleWithDouble:[((NSNumber *) nil_chk(((NSNumber *) check_class_cast(value, [NSNumber class])))) doubleValue]];
  }
  while ([((id<JavaUtilList>) nil_chk(values_)) size] <= index) {
    [values_ addWithId:nil];
  }
  (void) [values_ setWithInt:index withId:value];
  return self;
}

- (BOOL)isNullWithInt:(int)index {
  
#line 264
  id value = [self optWithInt:index];
  return value == nil || value == FQJSONObject_get_NULL__();
}


#line 275
- (id)getWithInt:(int)index {
  
#line 276
  @try {
    id value = [((id<JavaUtilList>) nil_chk(values_)) getWithInt:index];
    if (value == nil) {
      @throw [[FQJSONException alloc] initWithNSString:[NSString stringWithFormat:@"Value at %d is null.", index]];
    }
    return value;
  }
  @catch (
#line 282
  JavaLangIndexOutOfBoundsException *e) {
    @throw [[FQJSONException alloc] initWithNSString:[NSString stringWithFormat:@"Index %d out of range [0..%d)", index, [((id<JavaUtilList>) nil_chk(values_)) size]]];
  }
}


#line 291
- (id)optWithInt:(int)index {
  if (index < 0 || index >= [((id<JavaUtilList>) nil_chk(values_)) size]) {
    return nil;
  }
  return [((id<JavaUtilList>) nil_chk(values_)) getWithInt:index];
}


#line 302
- (id)removeWithInt:(int)index {
  
#line 303
  if (index < 0 || index >= [((id<JavaUtilList>) nil_chk(values_)) size]) {
    return nil;
  }
  return [((id<JavaUtilList>) nil_chk(values_)) removeWithInt:index];
}


#line 316
- (BOOL)getBooleanWithInt:(int)index {
  
#line 317
  id object = [self getWithInt:index];
  JavaLangBoolean *result = [FQJSON toBooleanWithId:object];
  if (result == nil) {
    @throw [FQJSON typeMismatchWithId:[JavaLangInteger valueOfWithInt:index] withId:object withNSString:@"boolean"];
  }
  return [((JavaLangBoolean *) nil_chk(result)) booleanValue];
}


#line 329
- (BOOL)optBooleanWithInt:(int)index {
  
#line 330
  return [self optBooleanWithInt:index withBoolean:NO];
}


#line 337
- (BOOL)optBooleanWithInt:(int)index
              withBoolean:(BOOL)fallback {
  
#line 338
  id object = [self optWithInt:index];
  JavaLangBoolean *result = [FQJSON toBooleanWithId:object];
  return result != nil ? [result booleanValue] : fallback;
}


#line 350
- (double)getDoubleWithInt:(int)index {
  
#line 351
  id object = [self getWithInt:index];
  JavaLangDouble *result = [FQJSON toDoubleWithId:object];
  if (result == nil) {
    @throw [FQJSON typeMismatchWithId:[JavaLangInteger valueOfWithInt:index] withId:object withNSString:@"double"];
  }
  return [((JavaLangDouble *) nil_chk(result)) doubleValue];
}


#line 363
- (double)optDoubleWithInt:(int)index {
  
#line 364
  return [self optDoubleWithInt:index withDouble:JavaLangDouble_NaN];
}


#line 371
- (double)optDoubleWithInt:(int)index
                withDouble:(double)fallback {
  
#line 372
  id object = [self optWithInt:index];
  JavaLangDouble *result = [FQJSON toDoubleWithId:object];
  return result != nil ? [result doubleValue] : fallback;
}


#line 384
- (int)getIntWithInt:(int)index {
  
#line 385
  id object = [self getWithInt:index];
  JavaLangInteger *result = [FQJSON toIntegerWithId:object];
  if (result == nil) {
    @throw [FQJSON typeMismatchWithId:[JavaLangInteger valueOfWithInt:index] withId:object withNSString:@"int"];
  }
  return [((JavaLangInteger *) nil_chk(result)) intValue];
}


#line 397
- (int)optIntWithInt:(int)index {
  
#line 398
  return [self optIntWithInt:index withInt:0];
}


#line 405
- (int)optIntWithInt:(int)index
             withInt:(int)fallback {
  
#line 406
  id object = [self optWithInt:index];
  JavaLangInteger *result = [FQJSON toIntegerWithId:object];
  return result != nil ? [result intValue] : fallback;
}


#line 418
- (long long int)getLongWithInt:(int)index {
  
#line 419
  id object = [self getWithInt:index];
  JavaLangLong *result = [FQJSON toLongWithId:object];
  if (result == nil) {
    @throw [FQJSON typeMismatchWithId:[JavaLangInteger valueOfWithInt:index] withId:object withNSString:@"long"];
  }
  return [((JavaLangLong *) nil_chk(result)) longLongValue];
}


#line 431
- (long long int)optLongWithInt:(int)index {
  
#line 432
  return [self optLongWithInt:index withLong:0LL];
}


#line 439
- (long long int)optLongWithInt:(int)index
                       withLong:(long long int)fallback {
  
#line 440
  id object = [self optWithInt:index];
  JavaLangLong *result = [FQJSON toLongWithId:object];
  return result != nil ? [result longLongValue] : fallback;
}


#line 451
- (NSString *)getStringWithInt:(int)index {
  
#line 452
  id object = [self getWithInt:index];
  NSString *result = [FQJSON toStringWithId:object];
  if (result == nil) {
    @throw [FQJSON typeMismatchWithId:[JavaLangInteger valueOfWithInt:index] withId:object withNSString:@"String"];
  }
  return result;
}


#line 464
- (NSString *)optStringWithInt:(int)index {
  
#line 465
  return [self optStringWithInt:index withNSString:@""];
}


#line 472
- (NSString *)optStringWithInt:(int)index
                  withNSString:(NSString *)fallback {
  
#line 473
  id object = [self optWithInt:index];
  NSString *result = [FQJSON toStringWithId:object];
  return result != nil ? result : fallback;
}


#line 485
- (FQJSONArray *)getJSONArrayWithInt:(int)index {
  
#line 486
  id object = [self getWithInt:index];
  if ([object isKindOfClass:[FQJSONArray class]]) {
    return (FQJSONArray *) check_class_cast(object, [FQJSONArray class]);
  }
  else {
    
#line 490
    @throw [FQJSON typeMismatchWithId:[JavaLangInteger valueOfWithInt:index] withId:object withNSString:@"JSONArray"];
  }
}


#line 498
- (FQJSONArray *)optJSONArrayWithInt:(int)index {
  id object = [self optWithInt:index];
  return [object isKindOfClass:[FQJSONArray class]] ? (FQJSONArray *) check_class_cast(object, [FQJSONArray class]) : nil;
}


#line 510
- (FQJSONObject *)getJSONObjectWithInt:(int)index {
  
#line 511
  id object = [self getWithInt:index];
  if ([object isKindOfClass:[FQJSONObject class]]) {
    return (FQJSONObject *) check_class_cast(object, [FQJSONObject class]);
  }
  else {
    
#line 515
    @throw [FQJSON typeMismatchWithId:[JavaLangInteger valueOfWithInt:index] withId:object withNSString:@"JSONObject"];
  }
}


#line 523
- (FQJSONObject *)optJSONObjectWithInt:(int)index {
  id object = [self optWithInt:index];
  return [object isKindOfClass:[FQJSONObject class]] ? (FQJSONObject *) check_class_cast(object, [FQJSONObject class]) : nil;
}


#line 535
- (FQJSONObject *)toJSONObjectWithFQJSONArray:(FQJSONArray *)names {
  
#line 536
  FQJSONObject *result = [[FQJSONObject alloc] init];
  int length = [JavaLangMath minWithInt:[((FQJSONArray *) nil_chk(names)) length] withInt:[((id<JavaUtilList>) nil_chk(values_)) size]];
  if (length == 0) {
    return nil;
  }
  for (int i = 0; i < length; i++) {
    NSString *name = [FQJSON toStringWithId:[names optWithInt:i]];
    (void) [result putWithNSString:name withId:[self optWithInt:i]];
  }
  return result;
}


#line 555
- (NSString *)joinWithNSString:(NSString *)separator {
  
#line 556
  FQJSONStringer *stringer = [[FQJSONStringer alloc] init];
  (void) [stringer openWithFQJSONStringer_ScopeEnum:FQJSONStringer_ScopeEnum_get_NULL_() withNSString:@""];
  for (int i = 0, size = [((id<JavaUtilList>) nil_chk(values_)) size]; i < size; i++) {
    if (i > 0) {
      (void) [((JavaLangStringBuilder *) nil_chk(stringer->out_)) appendWithNSString:separator];
    }
    (void) [stringer valueWithId:[values_ getWithInt:i]];
  }
  (void) [stringer closeWithFQJSONStringer_ScopeEnum:FQJSONStringer_ScopeEnum_get_NULL_() withFQJSONStringer_ScopeEnum:FQJSONStringer_ScopeEnum_get_NULL_() withNSString:@""];
  return [((JavaLangStringBuilder *) nil_chk(stringer->out_)) description];
}

- (NSString *)description {
  
#line 573
  @try {
    FQJSONStringer *stringer = [[FQJSONStringer alloc] init];
    [self writeToWithFQJSONStringer:stringer];
    return [stringer description];
  }
  @catch (
#line 577
  FQJSONException *e) {
    return nil;
  }
}


#line 594
- (NSString *)toStringWithInt:(int)indentSpaces {
  
#line 595
  FQJSONStringer *stringer = [[FQJSONStringer alloc] initWithInt:indentSpaces];
  [self writeToWithFQJSONStringer:stringer];
  return [stringer description];
}


#line 600
- (void)writeToWithFQJSONStringer:(FQJSONStringer *)stringer {
  
#line 601
  (void) [((FQJSONStringer *) nil_chk(stringer)) array];
  for (id __strong value in nil_chk(values_)) {
    (void) [stringer valueWithId:value];
  }
  (void) [stringer endArray];
}

- (BOOL)isEqual:(id)o {
  
#line 609
  return [o isKindOfClass:[FQJSONArray class]] && [((id<JavaUtilList>) nil_chk(((FQJSONArray *) nil_chk(((FQJSONArray *) check_class_cast(o, [FQJSONArray class]))))->values_)) isEqual:values_];
}

- (NSUInteger)hash {
  
#line 614
  return ((int) [((id<JavaUtilList>) nil_chk(values_)) hash]);
}

- (void)copyAllFieldsTo:(FQJSONArray *)other {
  [super copyAllFieldsTo:other];
  other->values_ = values_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "init", "JSONArray", NULL, 0x1, NULL },
    { "initWithJavaUtilCollection:", "JSONArray", NULL, 0x1, NULL },
    { "initWithFQJSONTokener:", "JSONArray", NULL, 0x1, "Lcom.fq.lib.json.JSONException;" },
    { "initWithNSString:", "JSONArray", NULL, 0x1, "Lcom.fq.lib.json.JSONException;" },
    { "initWithId:", "JSONArray", NULL, 0x1, "Lcom.fq.lib.json.JSONException;" },
    { "length", NULL, "I", 0x1, NULL },
    { "putWithBoolean:", "put", "Lcom.fq.lib.json.JSONArray;", 0x1, NULL },
    { "putWithDouble:", "put", "Lcom.fq.lib.json.JSONArray;", 0x1, "Lcom.fq.lib.json.JSONException;" },
    { "putWithInt:", "put", "Lcom.fq.lib.json.JSONArray;", 0x1, NULL },
    { "putWithLong:", "put", "Lcom.fq.lib.json.JSONArray;", 0x1, NULL },
    { "putWithId:", "put", "Lcom.fq.lib.json.JSONArray;", 0x1, NULL },
    { "putWithInt:withBoolean:", "put", "Lcom.fq.lib.json.JSONArray;", 0x1, "Lcom.fq.lib.json.JSONException;" },
    { "putWithInt:withDouble:", "put", "Lcom.fq.lib.json.JSONArray;", 0x1, "Lcom.fq.lib.json.JSONException;" },
    { "putWithInt:withInt:", "put", "Lcom.fq.lib.json.JSONArray;", 0x1, "Lcom.fq.lib.json.JSONException;" },
    { "putWithInt:withLong:", "put", "Lcom.fq.lib.json.JSONArray;", 0x1, "Lcom.fq.lib.json.JSONException;" },
    { "putWithInt:withId:", "put", "Lcom.fq.lib.json.JSONArray;", 0x1, "Lcom.fq.lib.json.JSONException;" },
    { "isNullWithInt:", "isNull", "Z", 0x1, NULL },
    { "getWithInt:", "get", "Ljava.lang.Object;", 0x1, "Lcom.fq.lib.json.JSONException;" },
    { "optWithInt:", "opt", "Ljava.lang.Object;", 0x1, NULL },
    { "removeWithInt:", "remove", "Ljava.lang.Object;", 0x1, NULL },
    { "getBooleanWithInt:", "getBoolean", "Z", 0x1, "Lcom.fq.lib.json.JSONException;" },
    { "optBooleanWithInt:", "optBoolean", "Z", 0x1, NULL },
    { "optBooleanWithInt:withBoolean:", "optBoolean", "Z", 0x1, NULL },
    { "getDoubleWithInt:", "getDouble", "D", 0x1, "Lcom.fq.lib.json.JSONException;" },
    { "optDoubleWithInt:", "optDouble", "D", 0x1, NULL },
    { "optDoubleWithInt:withDouble:", "optDouble", "D", 0x1, NULL },
    { "getIntWithInt:", "getInt", "I", 0x1, "Lcom.fq.lib.json.JSONException;" },
    { "optIntWithInt:", "optInt", "I", 0x1, NULL },
    { "optIntWithInt:withInt:", "optInt", "I", 0x1, NULL },
    { "getLongWithInt:", "getLong", "J", 0x1, "Lcom.fq.lib.json.JSONException;" },
    { "optLongWithInt:", "optLong", "J", 0x1, NULL },
    { "optLongWithInt:withLong:", "optLong", "J", 0x1, NULL },
    { "getStringWithInt:", "getString", "Ljava.lang.String;", 0x1, "Lcom.fq.lib.json.JSONException;" },
    { "optStringWithInt:", "optString", "Ljava.lang.String;", 0x1, NULL },
    { "optStringWithInt:withNSString:", "optString", "Ljava.lang.String;", 0x1, NULL },
    { "getJSONArrayWithInt:", "getJSONArray", "Lcom.fq.lib.json.JSONArray;", 0x1, "Lcom.fq.lib.json.JSONException;" },
    { "optJSONArrayWithInt:", "optJSONArray", "Lcom.fq.lib.json.JSONArray;", 0x1, NULL },
    { "getJSONObjectWithInt:", "getJSONObject", "Lcom.fq.lib.json.JSONObject;", 0x1, "Lcom.fq.lib.json.JSONException;" },
    { "optJSONObjectWithInt:", "optJSONObject", "Lcom.fq.lib.json.JSONObject;", 0x1, NULL },
    { "toJSONObjectWithFQJSONArray:", "toJSONObject", "Lcom.fq.lib.json.JSONObject;", 0x1, "Lcom.fq.lib.json.JSONException;" },
    { "joinWithNSString:", "join", "Ljava.lang.String;", 0x1, "Lcom.fq.lib.json.JSONException;" },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL },
    { "toStringWithInt:", "toString", "Ljava.lang.String;", 0x1, "Lcom.fq.lib.json.JSONException;" },
    { "writeToWithFQJSONStringer:", "writeTo", "V", 0x0, "Lcom.fq.lib.json.JSONException;" },
    { "isEqual:", "equals", "Z", 0x1, NULL },
    { "hash", "hashCode", "I", 0x1, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "values_", NULL, 0x12, "Ljava.util.List;", NULL,  },
  };
  static J2ObjcClassInfo _FQJSONArray = { "JSONArray", "com.fq.lib.json", NULL, 0x1, 46, methods, 1, fields, 0, NULL};
  return &_FQJSONArray;
}

@end
