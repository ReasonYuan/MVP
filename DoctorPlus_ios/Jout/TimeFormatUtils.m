//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/liaomin/Documents/workspace/Android/DocPlusLogic/src/com/fq/lib/tools/TimeFormatUtils.java
//
//  Created by liaomin on 15-5-4.
//

#line 1 "/Users/liaomin/Documents/workspace/Android/DocPlusLogic/src/com/fq/lib/tools/TimeFormatUtils.java"

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "TimeFormatUtils.h"
#include "java/lang/System.h"
#include "java/text/DateFormat.h"
#include "java/text/ParseException.h"
#include "java/text/SimpleDateFormat.h"
#include "java/util/Calendar.h"
#include "java/util/Date.h"

BOOL ComFqLibToolsTimeFormatUtils_initialized = NO;


#line 13
@implementation ComFqLibToolsTimeFormatUtils

IOSObjectArray * ComFqLibToolsTimeFormatUtils_WEEK_US_;
IOSObjectArray * ComFqLibToolsTimeFormatUtils_WEEK_CN_;
IOSObjectArray * ComFqLibToolsTimeFormatUtils_MONTH_US_;
IOSObjectArray * ComFqLibToolsTimeFormatUtils_WEEKS_;


#line 25
+ (NSString *)getUseDayWithLong:(long long int)startTime
                       withLong:(long long int)endTime {
  
#line 26
  long long int time = endTime - startTime;
  if (time <= 0) {
    return @"";
  }
  
#line 31
  long long int sec = time % 60;
  long long int temp = time / 60;
  if (temp == 0) {
    return [NSString stringWithFormat:@"%lld\"", sec];
  }
  long long int min = temp % 60;
  temp = temp / 60;
  if (temp == 0) {
    return [NSString stringWithFormat:@"%lld'%lld\"", min, sec];
  }
  
#line 42
  long long int hour = temp % 24;
  temp = temp / 24;
  if (temp == 0) {
    return [NSString stringWithFormat:@"%lld\u00b0%lld'%lld\"", hour, min, sec];
  }
  return [NSString stringWithFormat:@"%lld\u5929%lld\u00b0%lld'%lld\"", temp, hour, min, sec];
}

+ (NSString *)getTimeByFormatWithLong:(long long int)time
                         withNSString:(NSString *)format {
  
#line 56
  if (time <= 0) {
    return @"";
  }
  JavaUtilDate *date = [[JavaUtilDate alloc] initWithLong:time];
  JavaTextSimpleDateFormat *dft = (JavaTextSimpleDateFormat *) check_class_cast([JavaTextDateFormat getDateInstance], [JavaTextSimpleDateFormat class]);
  [((JavaTextSimpleDateFormat *) nil_chk(dft)) applyPatternWithNSString:format];
  return [dft formatWithJavaUtilDate:date];
}


#line 69
+ (NSString *)getTimeByFormatWithLong:(long long int)time {
  
#line 70
  NSString *dateTime = @"";
  if (time <= 0) {
    return @"";
  }
  JavaUtilDate *date = [[JavaUtilDate alloc] initWithLong:time];
  JavaTextSimpleDateFormat *dft = (JavaTextSimpleDateFormat *) check_class_cast([JavaTextDateFormat getDateInstance], [JavaTextSimpleDateFormat class]);
  [((JavaTextSimpleDateFormat *) nil_chk(dft)) applyPatternWithNSString:@"yyyy/MM/dd HH:mm"];
  dateTime = [dft formatWithJavaUtilDate:date];
  if ([date getHours] < 12) {
    dateTime = [NSString stringWithFormat:@"%@ AM", dateTime];
  }
  else {
    
#line 81
    dateTime = [NSString stringWithFormat:@"%@ PM", dateTime];
  }
  return dateTime;
}


#line 92
+ (JavaUtilDate *)getDate4StrWithNSString:(NSString *)dateStr
                             withNSString:(NSString *)format {
  
#line 94
  JavaTextSimpleDateFormat *dft = (JavaTextSimpleDateFormat *) check_class_cast([JavaTextDateFormat getDateInstance], [JavaTextSimpleDateFormat class]);
  [((JavaTextSimpleDateFormat *) nil_chk(dft)) applyPatternWithNSString:format];
  
#line 97
  @try {
    JavaUtilDate *time = [dft parseWithNSString:dateStr];
    return time;
  }
  @catch (
#line 100
  JavaTextParseException *e) {
    [((JavaTextParseException *) nil_chk(e)) printStackTrace];
    return nil;
  }
}

+ (JavaUtilCalendar *)getCalendar4StrWithNSString:(NSString *)dateStr
                                     withNSString:(NSString *)format {
  
#line 113
  JavaTextSimpleDateFormat *dft = (JavaTextSimpleDateFormat *) check_class_cast([JavaTextDateFormat getDateInstance], [JavaTextSimpleDateFormat class]);
  [((JavaTextSimpleDateFormat *) nil_chk(dft)) applyPatternWithNSString:format];
  @try {
    JavaUtilDate *time = [dft parseWithNSString:dateStr];
    JavaUtilCalendar *cal = [JavaUtilCalendar getInstance];
    [((JavaUtilCalendar *) nil_chk(cal)) setTimeWithJavaUtilDate:time];
    return cal;
  }
  @catch (
#line 120
  JavaTextParseException *e) {
    [((JavaTextParseException *) nil_chk(e)) printStackTrace];
    return nil;
  }
}


#line 135
+ (NSString *)getUSWeekWithLong:(long long int)date {
  
#line 136
  JavaUtilDate *mDate = [[JavaUtilDate alloc] initWithLong:date];
  JavaUtilCalendar *calendar = [JavaUtilCalendar getInstance];
  [((JavaUtilCalendar *) nil_chk(calendar)) setTimeWithJavaUtilDate:mDate];
  NSString *week = IOSObjectArray_Get(nil_chk(ComFqLibToolsTimeFormatUtils_WEEK_US_), [calendar getWithInt:JavaUtilCalendar_DAY_OF_WEEK] - 1);
  return week;
}


#line 149
+ (NSString *)getCNDateWithLong:(long long int)date {
  
#line 150
  JavaUtilDate *mDate = [[JavaUtilDate alloc] initWithLong:date];
  JavaUtilCalendar *calendar = [JavaUtilCalendar getInstance];
  [((JavaUtilCalendar *) nil_chk(calendar)) setTimeWithJavaUtilDate:mDate];
  JavaTextSimpleDateFormat *simpleDateFormat = [[JavaTextSimpleDateFormat alloc] initWithNSString:@"yyyy\u5e74MM\u6708dd\u65e5"];
  NSString *dateResult = [NSString stringWithFormat:@"%@ %@", [simpleDateFormat formatWithJavaUtilDate:mDate], IOSObjectArray_Get(nil_chk(ComFqLibToolsTimeFormatUtils_WEEK_CN_), [calendar getWithInt:JavaUtilCalendar_DAY_OF_WEEK] - 1)];
  return dateResult;
}


#line 164
+ (NSString *)getCNDate2WithLong:(long long int)date {
  
#line 165
  JavaUtilDate *mDate = [[JavaUtilDate alloc] initWithLong:date];
  JavaUtilCalendar *calendar = [JavaUtilCalendar getInstance];
  [((JavaUtilCalendar *) nil_chk(calendar)) setTimeWithJavaUtilDate:mDate];
  JavaTextSimpleDateFormat *simpleDateFormat = [[JavaTextSimpleDateFormat alloc] initWithNSString:@"yyyy/MM/dd"];
  NSString *dateResult = [NSString stringWithFormat:@"%@ %@", [simpleDateFormat formatWithJavaUtilDate:mDate], IOSObjectArray_Get(nil_chk(ComFqLibToolsTimeFormatUtils_WEEK_CN_), [calendar getWithInt:JavaUtilCalendar_DAY_OF_WEEK] - 1)];
  return dateResult;
}


#line 179
+ (NSString *)getUSDateWithLong:(long long int)date {
  
#line 180
  JavaUtilDate *mDate = [[JavaUtilDate alloc] initWithLong:date];
  JavaUtilCalendar *calendar = [JavaUtilCalendar getInstance];
  [((JavaUtilCalendar *) nil_chk(calendar)) setTimeWithJavaUtilDate:mDate];
  NSString *month = IOSObjectArray_Get(nil_chk(ComFqLibToolsTimeFormatUtils_MONTH_US_), [calendar getWithInt:JavaUtilCalendar_MONTH]);
  NSString *day = [NSString stringWithFormat:@"%dth,", [calendar getWithInt:JavaUtilCalendar_DAY_OF_MONTH]];
  NSString *year = [NSString stringWithFormat:@"%d", [calendar getWithInt:JavaUtilCalendar_YEAR]];
  NSString *dateResult = [NSString stringWithFormat:@"%@ %@%@", month, day, year];
  return dateResult;
}


#line 195
+ (NSString *)getStrDateWithLong:(long long int)date {
  
#line 196
  JavaUtilDate *mDate = [[JavaUtilDate alloc] initWithLong:date];
  NSString *remindDate = [((JavaTextSimpleDateFormat *) [[JavaTextSimpleDateFormat alloc] initWithNSString:@"yyyy-MM-dd"]) formatWithJavaUtilDate:mDate];
  return remindDate;
}


#line 202
+ (long long int)getTimeMillisByDateWithNSString:(NSString *)time {
  JavaTextSimpleDateFormat *sdf = [[JavaTextSimpleDateFormat alloc] initWithNSString:@"yyyy-MM-dd"];
  JavaUtilDate *date = [[JavaUtilDate alloc] init];
  @try {
    date = [sdf parseWithNSString:time];
  }
  @catch (
#line 207
  JavaTextParseException *e) {
    [((JavaTextParseException *) nil_chk(e)) printStackTrace];
  }
  return [((JavaUtilDate *) nil_chk(date)) getTime];
}


#line 214
+ (long long int)getTimeMillisByDateWithSecondsWithNSString:(NSString *)time {
  
#line 215
  JavaTextSimpleDateFormat *sdf = [[JavaTextSimpleDateFormat alloc] initWithNSString:@"yyyy-MM-dd HH:mm:ss"];
  JavaUtilDate *date = [[JavaUtilDate alloc] init];
  @try {
    date = [sdf parseWithNSString:time];
  }
  @catch (
#line 219
  JavaTextParseException *e) {
    [((JavaTextParseException *) nil_chk(e)) printStackTrace];
    return 0;
  }
  return [((JavaUtilDate *) nil_chk(date)) getTime];
}


#line 227
+ (long long int)getTimeMillisByDateWithSecondsWithNSString:(NSString *)time
                                               withNSString:(NSString *)foamat {
  
#line 228
  JavaTextSimpleDateFormat *sdf = [[JavaTextSimpleDateFormat alloc] initWithNSString:foamat];
  JavaUtilDate *date = [[JavaUtilDate alloc] init];
  @try {
    date = [sdf parseWithNSString:time];
  }
  @catch (
#line 232
  JavaTextParseException *e) {
    [((JavaTextParseException *) nil_chk(e)) printStackTrace];
    return 0;
  }
  return [((JavaUtilDate *) nil_chk(date)) getTime];
}

+ (NSString *)getTimeByStrWithNSString:(NSString *)time
                          withNSString:(NSString *)format {
  
#line 246
  NSString *remindDate = @"";
  JavaTextSimpleDateFormat *sdf = [[JavaTextSimpleDateFormat alloc] initWithNSString:@"yyyy-MM-dd"];
  JavaUtilDate *date = [[JavaUtilDate alloc] init];
  @try {
    date = [sdf parseWithNSString:time];
    remindDate = [((JavaTextSimpleDateFormat *) [[JavaTextSimpleDateFormat alloc] initWithNSString:format]) formatWithJavaUtilDate:date];
  }
  @catch (
#line 252
  JavaTextParseException *e) {
    [((JavaTextParseException *) nil_chk(e)) printStackTrace];
  }
  return remindDate;
}


#line 263
+ (NSString *)getdayOfWeekWithInt:(int)day {
  return IOSObjectArray_Get(nil_chk(ComFqLibToolsTimeFormatUtils_WEEKS_), day);
}


#line 272
+ (int)dataCompareWithLong:(long long int)timeMillis {
  
#line 273
  long long int temp = [JavaLangSystem currentTimeMillis] / 1000 * 1000;
  long long int todayTime = [ComFqLibToolsTimeFormatUtils getTimeMillisByDateWithNSString:[ComFqLibToolsTimeFormatUtils getStrDateWithLong:temp]];
  if (timeMillis == todayTime) return 0;
  else if (timeMillis < todayTime) return -1;
  else return 1;
}

- (id)init {
  return [super init];
}

+ (void)initialize {
  if (self == [ComFqLibToolsTimeFormatUtils class]) {
    ComFqLibToolsTimeFormatUtils_WEEK_US_ = [IOSObjectArray arrayWithObjects:(id[]){
#line 15
      @"Sunday", @"Monday", @"Tuesday", @"Wednesday", @"Thursday", @"Friday", @"Saturday" } count:7 type:[IOSClass classWithClass:[NSString class]]];
      ComFqLibToolsTimeFormatUtils_WEEK_CN_ = [IOSObjectArray arrayWithObjects:(id[]){
#line 16
        @"\u661f\u671f\u5929", @"\u661f\u671f\u4e00", @"\u661f\u671f\u4e8c", @"\u661f\u671f\u4e09", @"\u661f\u671f\u56db", @"\u661f\u671f\u4e94", @"\u661f\u671f\u516d" } count:7 type:[IOSClass classWithClass:[NSString class]]];
        ComFqLibToolsTimeFormatUtils_MONTH_US_ = [IOSObjectArray arrayWithObjects:(id[]){
#line 17
          @"January", @"February", @"March", @"April", @"May", @"June", @"July", @"August", @"September", @"October", @"November", @"December" } count:12 type:[IOSClass classWithClass:[NSString class]]];
          ComFqLibToolsTimeFormatUtils_WEEKS_ = [IOSObjectArray arrayWithObjects:(id[]){
#line 18
            @"Sun", @"Mon", @"Tues", @"Wed", @"Thur", @"Fri", @"Sat" } count:7 type:[IOSClass classWithClass:[NSString class]]];
            ComFqLibToolsTimeFormatUtils_initialized = YES;
          }
        }

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "getUseDayWithLong:withLong:", "getUseDay", "Ljava.lang.String;", 0x9, NULL },
    { "getTimeByFormatWithLong:withNSString:", "getTimeByFormat", "Ljava.lang.String;", 0x9, NULL },
    { "getTimeByFormatWithLong:", "getTimeByFormat", "Ljava.lang.String;", 0x9, NULL },
    { "getDate4StrWithNSString:withNSString:", "getDate4Str", "Ljava.util.Date;", 0x9, NULL },
    { "getCalendar4StrWithNSString:withNSString:", "getCalendar4Str", "Ljava.util.Calendar;", 0x9, NULL },
    { "getUSWeekWithLong:", "getUSWeek", "Ljava.lang.String;", 0x9, NULL },
    { "getCNDateWithLong:", "getCNDate", "Ljava.lang.String;", 0x9, NULL },
    { "getCNDate2WithLong:", "getCNDate2", "Ljava.lang.String;", 0x9, NULL },
    { "getUSDateWithLong:", "getUSDate", "Ljava.lang.String;", 0x9, NULL },
    { "getStrDateWithLong:", "getStrDate", "Ljava.lang.String;", 0x9, NULL },
    { "getTimeMillisByDateWithNSString:", "getTimeMillisByDate", "J", 0x9, NULL },
    { "getTimeMillisByDateWithSecondsWithNSString:", "getTimeMillisByDateWithSeconds", "J", 0x9, NULL },
    { "getTimeMillisByDateWithSecondsWithNSString:withNSString:", "getTimeMillisByDateWithSeconds", "J", 0x9, NULL },
    { "getTimeByStrWithNSString:withNSString:", "getTimeByStr", "Ljava.lang.String;", 0x9, NULL },
    { "getdayOfWeekWithInt:", "getdayOfWeek", "Ljava.lang.String;", 0x9, NULL },
    { "dataCompareWithLong:", "dataCompare", "I", 0x9, NULL },
    { "init", NULL, NULL, 0x1, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "WEEK_US_", NULL, 0x9, "[Ljava.lang.String;", &ComFqLibToolsTimeFormatUtils_WEEK_US_,  },
    { "WEEK_CN_", NULL, 0x9, "[Ljava.lang.String;", &ComFqLibToolsTimeFormatUtils_WEEK_CN_,  },
    { "MONTH_US_", NULL, 0x9, "[Ljava.lang.String;", &ComFqLibToolsTimeFormatUtils_MONTH_US_,  },
    { "WEEKS_", NULL, 0x1a, "[Ljava.lang.String;", &ComFqLibToolsTimeFormatUtils_WEEKS_,  },
  };
  static J2ObjcClassInfo _ComFqLibToolsTimeFormatUtils = { "TimeFormatUtils", "com.fq.lib.tools", NULL, 0x1, 17, methods, 4, fields, 0, NULL};
  return &_ComFqLibToolsTimeFormatUtils;
}

@end
