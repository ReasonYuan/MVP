//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/liaomin/Documents/workspace/Android/DocPlusLogic/src/com/fq/lib/tools/Tool.java
//
//  Created by liaomin on 15-5-4.
//

#line 1 "/Users/liaomin/Documents/workspace/Android/DocPlusLogic/src/com/fq/lib/tools/Tool.java"

#include "AeSimpleSHA1.h"
#include "CertificationStatus.h"
#include "ChinesetSortHelper.h"
#include "Constants.h"
#include "FileSystem.h"
#include "HalcyonEntity.h"
#include "HalcyonUploadLooper.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "JSONObject.h"
#include "Tag.h"
#include "Tool.h"
#include "User.h"
#include "java/lang/Integer.h"
#include "java/lang/StringBuffer.h"
#include "java/text/DecimalFormat.h"
#include "java/util/ArrayList.h"
#include "java/util/Collections.h"
#include "java/util/HashMap.h"
#include "java/util/Iterator.h"
#include "java/util/Random.h"
#include "java/util/TreeMap.h"
#include "java/util/regex/Matcher.h"
#include "java/util/regex/Pattern.h"


#line 22
@implementation ComFqLibToolsTool

+ (NSString *)getNameByURLWithNSString:(NSString *)url {
  
#line 25
  int index = [((NSString *) nil_chk(url)) lastIndexOf:'/'];
  return [url substring:index + 1];
}


#line 30
+ (JavaUtilTreeMap *)getSortListWithJavaUtilArrayList:(JavaUtilArrayList *)userList {
  [JavaUtilCollections sortWithJavaUtilList:userList];
  JavaUtilTreeMap *map = [[JavaUtilTreeMap alloc] init];
  for (ComFqHalcyonEntityHalcyonEntity * __strong user in nil_chk(userList)) {
    unichar headChar = [((NSString *) nil_chk([((NSString *) nil_chk([((ComFqHalcyonEntityHalcyonEntity *) nil_chk(user)) getPinyinName])) uppercaseString])) charAtWithInt:0];
    NSString *head = [NSString valueOfChar:headChar];
    if (headChar > 90 || headChar < 65) {
      head = @"#";
    }
    
#line 40
    if (![map containsKeyWithId:head]) {
      JavaUtilArrayList *arrays = [[JavaUtilArrayList alloc] init];
      (void) [map putWithId:head withId:arrays];
    }
    JavaUtilArrayList *arrays = [map getWithId:head];
    [((JavaUtilArrayList *) nil_chk(arrays)) addWithId:(ComFqHalcyonEntityHalcyonEntity *) user];
  }
  return map;
}


#line 78
+ (JavaUtilArrayList *)getFilterArrayListAllWithJavaUtilArrayList:(JavaUtilArrayList *)oldList
                                                     withNSString:(NSString *)str {
  
#line 79
  JavaUtilArrayList *filterArrayList = [[JavaUtilArrayList alloc] init];
  NSString *pinyin = [((NSString *) nil_chk([ComFqLibChinesetSortHelper getPingYinWithNSString:str])) uppercaseString];
  for (ComFqHalcyonEntityHalcyonEntity * __strong entity in nil_chk(oldList)) {
    NSString *pinyinName = [((NSString *) nil_chk([((ComFqHalcyonEntityHalcyonEntity *) nil_chk(entity)) getPinyinName])) uppercaseString];
    BOOL isExist = YES;
    for (int i = 0; i < ((int) [((NSString *) nil_chk(str)) length]); i++) {
      int index = [((NSString *) nil_chk(pinyinName)) indexOf:[((NSString *) nil_chk(pinyin)) charAtWithInt:i]];
      if (index != -1) {
        pinyinName = [pinyinName substring:index + 1];
      }
      else {
        
#line 89
        isExist = NO;
        break;
      }
    }
    if (isExist) {
      [filterArrayList addWithId:(ComFqHalcyonEntityHalcyonEntity *) entity];
    }
  }
  return filterArrayList;
}


#line 100
+ (BOOL)checkPasswordWithNSString:(NSString *)password {
  
#line 101
  if (password == nil) return NO;
  NSString *reg = @"^(?![0-9]+$)(?![a-zA-Z]+$)[0-9A-Za-z]{6,20}$";
  if ([((NSString *) nil_chk(password)) matches:reg]) {
    return YES;
  }
  return NO;
}


#line 109
+ (BOOL)checkInviteWithNSString:(NSString *)invite {
  
#line 110
  if (invite == nil) return NO;
  NSString *reg = @"^(?![0-9]+$)(?![a-zA-Z]+$)[0-9A-Za-z]{4}$";
  if ([((NSString *) nil_chk(invite)) matches:reg]) {
    return YES;
  }
  return NO;
}


#line 119
+ (NSString *)getSizeWithLong:(long long int)size {
  if (size < 1204) {
    return [NSString stringWithFormat:@"%lldB", size];
  }
  else
#line 122
  if (size < 1024 * 1024) {
    return [NSString stringWithFormat:@"%@k", [ComFqLibToolsTool DecimalFloatWithFloat:(float) size / 1024]];
  }
  else {
    
#line 125
    return [NSString stringWithFormat:@"%@M", [ComFqLibToolsTool DecimalFloatWithFloat:(float) size / 1024 / 1024.0f]];
  }
}


#line 129
+ (NSString *)DecimalFloatWithFloat:(float)scale_ {
  
#line 130
  JavaTextDecimalFormat *fnum = [[JavaTextDecimalFormat alloc] initWithNSString:@"##0.0"];
  return [fnum formatWithDouble:scale_];
}


#line 134
+ (NSString *)encryptWithNSString:(NSString *)key {
  
#line 135
  return [ComFqLibToolsAeSimpleSHA1 repeat20TimesAndSHA1WithNSString:key];
}


#line 138
+ (ComFqHalcyonEntityTag *)getTagByIdWithInt:(int)id_ {
  
#line 139
  if (id_ == 0) return [[ComFqHalcyonEntityTag alloc] init];
  for (ComFqHalcyonEntityTag * __strong tag in nil_chk(ComFqLibToolsConstants_get_tagList_())) {
    if ([((ComFqHalcyonEntityTag *) nil_chk(tag)) getId] == id_) {
      return tag;
    }
  }
  return [[ComFqHalcyonEntityTag alloc] init];
}


#line 212
+ (NSString *)get3ThWithInt:(int)numbaer {
  
#line 213
  return [((NSString *) nil_chk([NSString valueOfInt:numbaer])) replaceAll:@"(?<=\\d)(?=(?:\\d{3})+$)" withReplacement:@","];
}


#line 221
+ (int)parse3ThWithNSString:(NSString *)numbaer {
  
#line 222
  return [JavaLangInteger parseIntWithNSString:[((NSString *) nil_chk([NSString valueOf:numbaer])) replaceAll:@"," withReplacement:@""]];
}


#line 225
+ (JavaUtilHashMap *)getMapByJsonObjectWithFQJSONObject:(FQJSONObject *)obj {
  
#line 226
  JavaUtilHashMap *map = [[JavaUtilHashMap alloc] init];
  if (obj != nil) {
    id<JavaUtilIterator> it = [obj keys];
    while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
      NSString *key = [it next];
      (void) [map putWithId:key withId:[obj optWithNSString:key]];
    }
  }
  return map;
}


#line 240
+ (void)clearUserData {
  
#line 241
  [((ComFqHalcyonHalcyonUploadLooper *) nil_chk([ComFqHalcyonHalcyonUploadLooper getInstance])) stop];
  [((ComFqHalcyonExtendFilesystemFileSystem *) nil_chk([ComFqHalcyonExtendFilesystemFileSystem getInstance])) saveLoginUserWithNSString:[((ComFqHalcyonEntityUser *) nil_chk([ComFqLibToolsConstants getUser])) getPhoneNumber] withNSString:@"" withInt:[((ComFqHalcyonEntityUser *) nil_chk([ComFqLibToolsConstants getUser])) getUserId]];
  [ComFqLibToolsConstants setUserWithComFqHalcyonEntityUser:nil];
  [((ComFqHalcyonEntityCertificationStatus *) nil_chk([ComFqHalcyonEntityCertificationStatus getInstance])) clear];
}


#line 250
+ (BOOL)isMobileNOWithNSString:(NSString *)mobiles {
  
#line 252
  JavaUtilRegexPattern *p = [JavaUtilRegexPattern compileWithNSString:@"^1\\d{10}$"];
  JavaUtilRegexMatcher *m = [((JavaUtilRegexPattern *) nil_chk(p)) matcherWithJavaLangCharSequence:mobiles];
  return [((JavaUtilRegexMatcher *) nil_chk(m)) matches];
}


#line 262
+ (NSString *)numToCHNWithInt:(int)number {
  
#line 263
  IOSObjectArray *bigNum = [IOSObjectArray arrayWithObjects:(id[]){ @"", @"\u4e00", @"\u4e8c", @"\u4e09", @"\u56db", @"\u4e94", @"\u516d", @"\u4e03", @"\u516b", @"\u4e5d" } count:10 type:[IOSClass classWithClass:[NSString class]]];
  if (number < 10) {
    return IOSObjectArray_Get(bigNum, number);
  }
  else
#line 266
  if (number >= 10) {
    return [NSString stringWithFormat:@"%@\u5341%@", IOSObjectArray_Get(bigNum, number / 10), IOSObjectArray_Get(bigNum, number % 10)];
  }
  return @"";
}


#line 276
+ (BOOL)isUserInfoFullWithComFqHalcyonEntityUser:(ComFqHalcyonEntityUser *)user {
  if ([@"" isEqual:[((ComFqHalcyonEntityUser *) nil_chk(user)) getName]] || [@"" isEqual:[user getGenderStr]] ||
#line 278
  [@"" isEqual:[user getDepartment]] || [@"" isEqual:[user getHospital]] ||
#line 279
  [@"" isEqual:[user getTitleStr]]) {
    return NO;
  }
  return YES;
}


#line 289
+ (NSString *)getRandomkey {
  
#line 290
  JavaLangStringBuffer *sb = [[JavaLangStringBuffer alloc] init];
  JavaUtilRandom *random = [[JavaUtilRandom alloc] init];
  int count = [random nextIntWithInt:20] + 40;
  for (int i = 0; i < count; i++) {
    (void) [sb appendWithInt:([random nextIntWithInt:97] + 26)];
  }
  return [sb description];
}

- (id)init {
  return [super init];
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "getNameByURLWithNSString:", "getNameByURL", "Ljava.lang.String;", 0x9, NULL },
    { "getSortListWithJavaUtilArrayList:", "getSortList", "Ljava.util.TreeMap;", 0x9, NULL },
    { "getFilterArrayListAllWithJavaUtilArrayList:withNSString:", "getFilterArrayListAll", "Ljava.util.ArrayList;", 0x9, NULL },
    { "checkPasswordWithNSString:", "checkPassword", "Z", 0x9, NULL },
    { "checkInviteWithNSString:", "checkInvite", "Z", 0x9, NULL },
    { "getSizeWithLong:", "getSize", "Ljava.lang.String;", 0x9, NULL },
    { "DecimalFloatWithFloat:", "DecimalFloat", "Ljava.lang.String;", 0x9, NULL },
    { "encryptWithNSString:", "encrypt", "Ljava.lang.String;", 0x9, NULL },
    { "getTagByIdWithInt:", "getTagById", "Lcom.fq.halcyon.entity.Tag;", 0x9, NULL },
    { "get3ThWithInt:", "get3Th", "Ljava.lang.String;", 0x9, NULL },
    { "parse3ThWithNSString:", "parse3Th", "I", 0x9, NULL },
    { "getMapByJsonObjectWithFQJSONObject:", "getMapByJsonObject", "Ljava.util.HashMap;", 0x9, NULL },
    { "clearUserData", NULL, "V", 0x9, NULL },
    { "isMobileNOWithNSString:", "isMobileNO", "Z", 0x9, NULL },
    { "numToCHNWithInt:", "numToCHN", "Ljava.lang.String;", 0x9, NULL },
    { "isUserInfoFullWithComFqHalcyonEntityUser:", "isUserInfoFull", "Z", 0x9, NULL },
    { "getRandomkey", NULL, "Ljava.lang.String;", 0x9, NULL },
    { "init", NULL, NULL, 0x1, NULL },
  };
  static J2ObjcClassInfo _ComFqLibToolsTool = { "Tool", "com.fq.lib.tools", NULL, 0x1, 18, methods, 0, NULL, 0, NULL};
  return &_ComFqLibToolsTool;
}

@end
