//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/liaomin/Documents/workspace/Android/DoctorPlus_ios/Java_implement/com/fq/http/async/uploadloop/FQLooper.java
//
//  Created by liaomin on 15-5-4.
//

#line 1 "/Users/liaomin/Documents/workspace/Android/DoctorPlus_ios/Java_implement/com/fq/http/async/uploadloop/FQLooper.java"

#include "Constants.h"
#include "FQLoopQueue.h"
#include "FQLooper.h"
#include "FileSystem.h"
#include "IOSObjectArray.h"
#include "LoopCell.h"
#include "LoopCellHandle.h"
#include "LoopUpLoadCell.h"
#include "User.h"
#include "java/io/File.h"
#include "java/lang/Exception.h"
#include "java/lang/Runnable.h"
#include "java/lang/Thread.h"
#include "java/util/ArrayList.h"


#line 12
@implementation ComFqHttpAsyncUploadloopFQLooper


#line 24
- (id)initComFqHttpAsyncUploadloopFQLooper {
  if (self = [super init]) {
    
#line 25
    mQueue_ = [[ComFqHttpAsyncUploadloopFQLoopQueue alloc] init];
    
#line 26
    mInterval_ = 1000;
    
#line 27
    mIsPause_ = NO;
    
#line 28
    mWorker_ = [[ComFqHttpAsyncUploadloopFQLooper_$1 alloc] initWithComFqHttpAsyncUploadloopFQLooper:self];
  }
  return self;
}

- (id)init {
  return [self initComFqHttpAsyncUploadloopFQLooper];
}


#line 52
- (id)initWithInt:(int)interval {
  if (self =
#line 53
  [self initComFqHttpAsyncUploadloopFQLooper]) {
    
#line 54
    mInterval_ = interval;
  }
  return self;
}


#line 57
- (void)pushWithComFqHttpAsyncUploadloopLoopCellHandle:(ComFqHttpAsyncUploadloopLoopCellHandle *)hanlde {
  @synchronized(self) {
    {
      
#line 58
      if (hanlde == nil || hanlde->cell_ == nil) return;
      if ([((JavaUtilArrayList *) nil_chk([((ComFqHttpAsyncUploadloopFQLoopQueue *) nil_chk(mQueue_)) getAll])) containsWithId:hanlde]) return;
      for (int i = 0; i < [((JavaUtilArrayList *) nil_chk([mQueue_ getAll])) size]; i++) {
        ComFqHttpAsyncUploadloopLoopCellHandle *handler = [((JavaUtilArrayList *) nil_chk([mQueue_ getAll])) getWithInt:i];
        if (((ComFqHttpAsyncUploadloopLoopCellHandle *) nil_chk(handler))->cell_ == nil || [((NSString *) nil_chk(handler->cell_->key_)) isEqual:((ComFqHttpAsyncUploadloopLoopCellHandle *) nil_chk(hanlde))->cell_->key_]) {
          [mQueue_ removeWithId:handler];
          [((ComFqHttpAsyncUploadloopLoopCell *) nil_chk(handler->cell_)) deletFile];
          break;
        }
      }
      [((ComFqHttpAsyncUploadloopLoopCellHandle *) nil_chk(hanlde)) setQueueWithComFqHttpAsyncUploadloopFQLoopQueue:mQueue_];
      [mQueue_ addWithId:hanlde];
      [self start];
    }
  }
}


#line 73
- (void)pushWithComFqHttpAsyncUploadloopLoopCell:(ComFqHttpAsyncUploadloopLoopCell *)cell {
  @synchronized(self) {
    {
      
#line 74
      if (cell == nil) return;
      ComFqHttpAsyncUploadloopLoopCellHandle *handle = [[ComFqHttpAsyncUploadloopLoopCellHandle alloc] initWithComFqHttpAsyncUploadloopLoopCell:cell];
      [self pushWithComFqHttpAsyncUploadloopLoopCellHandle:handle];
    }
  }
}


#line 79
- (void)stop {
  @synchronized(self) {
    {
    }
  }
}


#line 98
- (void)start {
  @synchronized(self) {
    {
      
#line 99
      if ([ComFqLibToolsConstants getUser] == nil || [((ComFqHalcyonEntityUser *) nil_chk([ComFqLibToolsConstants getUser])) getUserId] == 0) {
        return;
      }
      mIsPause_ = NO;
      if (mLooperThread_ != nil && ![mLooperThread_ isAlive]) mLooperThread_ = nil;
      if (mLooperThread_ == nil) {
        JavaIoFile *file = [[JavaIoFile alloc] initWithNSString:[((ComFqHalcyonExtendFilesystemFileSystem *) nil_chk([ComFqHalcyonExtendFilesystemFileSystem getInstance])) getUserLoopPath]];
        if ([file exists]) {
          IOSObjectArray *list = [file listFiles];
          for (int i = 0; i < (int) [((IOSObjectArray *) nil_chk(list)) count]; i++) {
            JavaIoFile *cellFile = IOSObjectArray_Get(list, i);
            ComFqHttpAsyncUploadloopLoopCell *cell = [ComFqHttpAsyncUploadloopLoopCell load__WithNSString:[((JavaIoFile *) nil_chk(cellFile)) getAbsolutePath]];
            ComFqHttpAsyncUploadloopLoopCellHandle *handle = [[ComFqHttpAsyncUploadloopLoopCellHandle alloc] initWithComFqHttpAsyncUploadloopLoopCell:cell];
            if (handle->cell_ == nil) {
              [cellFile delete__];
              continue;
            }
            BOOL contains = NO;
            for (int j = 0; j < [((JavaUtilArrayList *) nil_chk([((ComFqHttpAsyncUploadloopFQLoopQueue *) nil_chk(mQueue_)) getAll])) size]; j++) {
              ComFqHttpAsyncUploadloopLoopCellHandle *handler = [((JavaUtilArrayList *) nil_chk([mQueue_ getAll])) getWithInt:j];
              if ([((NSString *) nil_chk(((ComFqHttpAsyncUploadloopLoopCell *) nil_chk(((ComFqHttpAsyncUploadloopLoopCellHandle *) nil_chk(handler))->cell_))->key_)) isEqual:handle->cell_->key_]) {
                contains = YES;
                break;
              }
            }
            if (!contains) {
              [handle setQueueWithComFqHttpAsyncUploadloopFQLoopQueue:mQueue_];
              [mQueue_ addWithId:handle];
            }
          }
        }
        mLooperThread_ = [[JavaLangThread alloc] initWithJavaLangRunnable:mWorker_];
        [mLooperThread_ start];
      }
    }
  }
}


#line 135
- (JavaUtilArrayList *)getAll {
  
#line 136
  return [((ComFqHttpAsyncUploadloopFQLoopQueue *) nil_chk(mQueue_)) getAll];
}


#line 139
- (int)getUploadCount {
  
#line 140
  JavaUtilArrayList *all = [((ComFqHttpAsyncUploadloopFQLoopQueue *) nil_chk(mQueue_)) getAll];
  int count = 0;
  for (int i = 0; i < [((JavaUtilArrayList *) nil_chk(all)) size]; i++) {
    ComFqHttpAsyncUploadloopLoopCellHandle *handle = [all getWithInt:i];
    if (((ComFqHttpAsyncUploadloopLoopCellHandle *) nil_chk(handle))->cell_ != nil && [handle->cell_ getType] == ComFqHttpAsyncUploadloopLoopCell_CELL_TYPEEnum_get_CELL_UPLOAD()) {
      count++;
    }
  }
  return count;
}


#line 151
- (int)getUploadUserCount {
  
#line 152
  JavaUtilArrayList *all = [((ComFqHttpAsyncUploadloopFQLoopQueue *) nil_chk(mQueue_)) getAll];
  int count = 0;
  for (int i = 0; i < [((JavaUtilArrayList *) nil_chk(all)) size]; i++) {
    ComFqHttpAsyncUploadloopLoopCellHandle *handle = [all getWithInt:i];
    if (((ComFqHttpAsyncUploadloopLoopCellHandle *) nil_chk(handle))->cell_ != nil && [handle->cell_ getType] == ComFqHttpAsyncUploadloopLoopCell_CELL_TYPEEnum_get_CELL_OTHER()) {
      count++;
    }
  }
  return count;
}


#line 163
- (JavaUtilArrayList *)getUploadArray {
  
#line 164
  JavaUtilArrayList *all = [((ComFqHttpAsyncUploadloopFQLoopQueue *) nil_chk(mQueue_)) getAll];
  JavaUtilArrayList *uploadArray = [[JavaUtilArrayList alloc] init];
  for (int i = 0; i < [((JavaUtilArrayList *) nil_chk(all)) size]; i++) {
    ComFqHttpAsyncUploadloopLoopCellHandle *handle = [all getWithInt:i];
    if (((ComFqHttpAsyncUploadloopLoopCellHandle *) nil_chk(handle))->cell_ != nil && [handle->cell_ getType] == ComFqHttpAsyncUploadloopLoopCell_CELL_TYPEEnum_get_CELL_UPLOAD()) {
      [uploadArray addWithId:[all getWithInt:i]];
    }
  }
  return uploadArray;
}


#line 175
- (JavaUtilArrayList *)getUploadCellsWithInt:(int)recordId {
  
#line 176
  JavaUtilArrayList *all = [((ComFqHttpAsyncUploadloopFQLoopQueue *) nil_chk(mQueue_)) getAll];
  JavaUtilArrayList *uploadArray = [[JavaUtilArrayList alloc] init];
  for (int i = 0; i < [((JavaUtilArrayList *) nil_chk(all)) size]; i++) {
    ComFqHttpAsyncUploadloopLoopCellHandle *handle = [all getWithInt:i];
    if (((ComFqHttpAsyncUploadloopLoopCellHandle *) nil_chk(handle))->cell_ != nil && [handle->cell_ isKindOfClass:[ComFqHttpAsyncUploadloopLoopUpLoadCell class]]) {
      [uploadArray addWithId:[all getWithInt:i]];
    }
  }
  return uploadArray;
}


#line 187
- (void)cancelUploadCellWithInt:(int)recordId
                   withNSString:(NSString *)uuid {
  
#line 188
  JavaUtilArrayList *all = [self getUploadCellsWithInt:recordId];
  for (int i = 0; i < [((JavaUtilArrayList *) nil_chk(all)) size]; i++) {
    ComFqHttpAsyncUploadloopLoopCellHandle *handel = [all getWithInt:i];
    if ([all getWithInt:i] != nil && ((ComFqHttpAsyncUploadloopLoopCellHandle *) nil_chk(handel))->cell_ != nil && [handel->cell_ isKindOfClass:[ComFqHttpAsyncUploadloopLoopUpLoadCell class]]) {
      ComFqHttpAsyncUploadloopLoopUpLoadCell *cell = (ComFqHttpAsyncUploadloopLoopUpLoadCell *) check_class_cast(handel->cell_, [ComFqHttpAsyncUploadloopLoopUpLoadCell class]);
      if (recordId == [cell getRecordId] && [((NSString *) nil_chk(cell->uuid_)) isEqual:uuid]) {
        [handel cancle];
      }
    }
  }
}

- (void)copyAllFieldsTo:(ComFqHttpAsyncUploadloopFQLooper *)other {
  [super copyAllFieldsTo:other];
  other->mInterval_ = mInterval_;
  other->mIsPause_ = mIsPause_;
  other->mLooperThread_ = mLooperThread_;
  other->mQueue_ = mQueue_;
  other->mWorker_ = mWorker_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "init", "FQLooper", NULL, 0x1, NULL },
    { "initWithInt:", "FQLooper", NULL, 0x1, NULL },
    { "pushWithComFqHttpAsyncUploadloopLoopCellHandle:", "push", "V", 0x21, NULL },
    { "pushWithComFqHttpAsyncUploadloopLoopCell:", "push", "V", 0x21, NULL },
    { "stop", NULL, "V", 0x21, NULL },
    { "start", NULL, "V", 0x21, NULL },
    { "getAll", NULL, "Ljava.util.ArrayList;", 0x1, NULL },
    { "getUploadCount", NULL, "I", 0x1, NULL },
    { "getUploadUserCount", NULL, "I", 0x1, NULL },
    { "getUploadArray", NULL, "Ljava.util.ArrayList;", 0x1, NULL },
    { "getUploadCellsWithInt:", "getUploadCells", "Ljava.util.ArrayList;", 0x1, NULL },
    { "cancelUploadCellWithInt:withNSString:", "cancelUploadCell", "V", 0x1, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "mQueue_", NULL, 0x4, "Lcom.fq.http.async.uploadloop.FQLoopQueue;", NULL,  },
    { "mLooperThread_", NULL, 0x2, "Ljava.lang.Thread;", NULL,  },
    { "mInterval_", NULL, 0x2, "I", NULL,  },
    { "mWorker_", NULL, 0x2, "Ljava.lang.Runnable;", NULL,  },
    { "mIsPause_", NULL, 0x2, "Z", NULL,  },
  };
  static J2ObjcClassInfo _ComFqHttpAsyncUploadloopFQLooper = { "FQLooper", "com.fq.http.async.uploadloop", NULL, 0x1, 12, methods, 5, fields, 0, NULL};
  return &_ComFqHttpAsyncUploadloopFQLooper;
}

@end

@implementation ComFqHttpAsyncUploadloopFQLooper_$1


#line 31
- (void)run {
  
#line 32
  @try {
    while ((!this$0_->mIsPause_) && ![((ComFqHttpAsyncUploadloopFQLoopQueue *) nil_chk(this$0_->mQueue_)) isEmpty]) {
      ComFqHttpAsyncUploadloopLoopCellHandle *handle = [((ComFqHttpAsyncUploadloopFQLoopQueue *) nil_chk(this$0_->mQueue_)) getNext];
      if (!((ComFqHttpAsyncUploadloopLoopCellHandle *) nil_chk(handle))->isHanlding_) {
        handle->isHanlding_ = YES;
        [handle onHandle];
      }
      [JavaLangThread sleepWithLong:this$0_->mInterval_];
    }
  }
  @catch (
#line 41
  JavaLangException *e) {
    [((JavaLangException *) nil_chk(e)) printStackTrace];
  }
}

- (id)initWithComFqHttpAsyncUploadloopFQLooper:(ComFqHttpAsyncUploadloopFQLooper *)outer$ {
  this$0_ = outer$;
  return [super init];
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "run", NULL, "V", 0x1, NULL },
    { "initWithComFqHttpAsyncUploadloopFQLooper:", "init", NULL, 0x0, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "Lcom.fq.http.async.uploadloop.FQLooper;", NULL,  },
  };
  static J2ObjcClassInfo _ComFqHttpAsyncUploadloopFQLooper_$1 = { "$1", "com.fq.http.async.uploadloop", "FQLooper", 0x8000, 2, methods, 1, fields, 0, NULL};
  return &_ComFqHttpAsyncUploadloopFQLooper_$1;
}

@end
