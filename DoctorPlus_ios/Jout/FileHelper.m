//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/liaomin/Documents/workspace/Android/DocPlusLogic/src/com/fq/lib/FileHelper.java
//
//  Created by liaomin on 15-5-4.
//

#line 1 "/Users/liaomin/Documents/workspace/Android/DocPlusLogic/src/com/fq/lib/FileHelper.java"

#include "Constants.h"
#include "DES3Utils.h"
#include "Data.h"
#include "FQLog.h"
#include "FileHelper.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "JSONArray.h"
#include "JSONObject.h"
#include "java/io/BufferedReader.h"
#include "java/io/File.h"
#include "java/io/FileInputStream.h"
#include "java/io/FileNotFoundException.h"
#include "java/io/FileOutputStream.h"
#include "java/io/IOException.h"
#include "java/io/InputStream.h"
#include "java/io/InputStreamReader.h"
#include "java/io/ObjectInputStream.h"
#include "java/io/ObjectOutputStream.h"
#include "java/io/PrintStream.h"
#include "java/lang/Boolean.h"
#include "java/lang/Exception.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/System.h"


#line 21
@implementation ComFqLibFileHelper

NSString * ComFqLibFileHelper_TAG_ = @"FileHelper";


#line 28
- (void)deleteAllFolderWithNSString:(NSString *)path {
  
#line 29
  JavaIoFile *file = [[JavaIoFile alloc] initWithNSString:path];
  [ComFqLibFileHelper deleteFileWithJavaIoFile:file withBoolean:YES];
}


#line 40
+ (BOOL)deleteFileWithJavaIoFile:(JavaIoFile *)file
                     withBoolean:(BOOL)isDelteFolder {
  
#line 41
  if ([((JavaIoFile *) nil_chk(file)) exists]) {
    if ([file isFile]) {
      [file delete__];
    }
    else
#line 44
    if ([file isDirectory]) {
      IOSObjectArray *files = [file listFiles];
      for (int i = 0; i < (int) [((IOSObjectArray *) nil_chk(files)) count]; i++) {
        [ComFqLibFileHelper deleteFileWithJavaIoFile:IOSObjectArray_Get(files, i) withBoolean:YES];
      }
      if (isDelteFolder) {
        [file delete__];
      }
    }
  }
  else {
    
#line 54
    return NO;
  }
  return YES;
}


#line 62
+ (long long int)getFileSizeWithJavaIoFile:(JavaIoFile *)file {
  
#line 63
  long long int size = 0;
  if ([((JavaIoFile *) nil_chk(file)) isDirectory]) {
    IOSObjectArray *files = [file listFiles];
    for (int i = 0; i < (int) [((IOSObjectArray *) nil_chk(files)) count]; i++) {
      size += [ComFqLibFileHelper getFileSizeWithJavaIoFile:IOSObjectArray_Get(files, i)];
      ;
    }
  }
  else {
    
#line 71
    size = [file length];
  }
  return size;
}


#line 76
+ (void)copyfileWithJavaIoFile:(JavaIoFile *)fromFile
                withJavaIoFile:(JavaIoFile *)toFile
           withJavaLangBoolean:(JavaLangBoolean *)rewrite {
  
#line 77
  if (![((JavaIoFile *) nil_chk(fromFile)) canRead]) {
    return;
  }
  if (![((JavaIoFile *) nil_chk([((JavaIoFile *) nil_chk(toFile)) getParentFile])) exists]) {
    [((JavaIoFile *) nil_chk([toFile getParentFile])) mkdirs];
  }
  if ([toFile exists] && [((JavaLangBoolean *) nil_chk(rewrite)) booleanValue]) {
    [toFile delete__];
  }
  @try {
    JavaIoFileInputStream *fosfrom = [[JavaIoFileInputStream alloc] initWithJavaIoFile:fromFile];
    JavaIoFileOutputStream *fosto = [[JavaIoFileOutputStream alloc] initWithJavaIoFile:toFile];
    IOSByteArray *bt = [IOSByteArray arrayWithLength:1024];
    int c;
    while ((c = [fosfrom readWithByteArray:bt]) > 0) {
      [fosto writeWithByteArray:bt withInt:0 withInt:c];
    }
    [fosfrom close];
    [fosto close];
  }
  @catch (
#line 96
  JavaLangException *ex) {
    return;
  }
}


#line 112
+ (BOOL)saveFileWithJavaIoInputStream:(JavaIoInputStream *)is
                         withNSString:(NSString *)path
                         withNSString:(NSString *)name {
  
#line 113
  IOSByteArray *bys = [IOSByteArray arrayWithLength:1024 * 10];
  JavaIoFile *file = [[JavaIoFile alloc] initWithNSString:[NSString stringWithFormat:@"%@/%@", path, name]];
  if (![file exists]) {
    @try {
      [file createNewFile];
    }
    @catch (
#line 118
    JavaIoIOException *e) {
      [ComFqLibToolsFQLog printWithNSString:ComFqLibFileHelper_TAG_ withNSString:[NSString stringWithFormat:@"create file %@ fail!", name]];
      [((JavaIoIOException *) nil_chk(e)) printStackTrace];
      return NO;
    }
  }
  @try {
    JavaIoFileOutputStream *fos = [[JavaIoFileOutputStream alloc] initWithJavaIoFile:file];
    int len = -1;
    while (-1 != (len = [((JavaIoInputStream *) nil_chk(is)) readWithByteArray:bys])) {
      [fos writeWithByteArray:bys withInt:0 withInt:len];
    }
    [fos flush];
    [fos close];
    [is close];
    return YES;
  }
  @catch (
#line 134
  JavaLangException *e) {
    [ComFqLibToolsFQLog printWithNSString:ComFqLibFileHelper_TAG_ withNSString:@"saveFile error"];
    [((JavaLangException *) nil_chk(e)) printStackTrace];
  }
  
#line 139
  return NO;
}


#line 149
+ (BOOL)saveFileWithNSString:(NSString *)str
                withNSString:(NSString *)path
                 withBoolean:(BOOL)encode {
  
#line 150
  @try {
    NSString *filePath = [path substring:0 endIndex:[((NSString *) nil_chk(path)) lastIndexOf:'/']];
    NSString *fileName = [path substring:[path lastIndexOf:'/'] + 1];
    return [ComFqLibFileHelper saveFileWithNSString:str withNSString:filePath withNSString:fileName withBoolean:encode];
  }
  @catch (
#line 154
  JavaLangException *e) {
  }
  return NO;
}


#line 167
+ (BOOL)saveFileWithNSString:(NSString *)str
                withNSString:(NSString *)path
                withNSString:(NSString *)name
                 withBoolean:(BOOL)encode {
  
#line 168
  JavaIoFile *file = [[JavaIoFile alloc] initWithNSString:[NSString stringWithFormat:@"%@/%@", path, name]];
  JavaIoFile *pathFile = [[JavaIoFile alloc] initWithNSString:path];
  if (![pathFile exists]) {
    [pathFile mkdirs];
  }
  @try {
    NSString *source = str;
    if (encode) {
      source = [ComFqLibPlatformDES3Utils encryptModeWithByteArray:[((NSString *) nil_chk([((NSString *) nil_chk(str)) description])) getBytes] withByteArray:ComFqLibToolsConstants_get_KEY_STRING_()];
    }
    JavaIoFileOutputStream *fos = [[JavaIoFileOutputStream alloc] initWithJavaIoFile:file];
    [fos writeWithByteArray:[((NSString *) nil_chk(source)) getBytes]];
    [fos flush];
    [fos close];
    return YES;
  }
  @catch (
#line 183
  JavaLangException *e) {
    [ComFqLibToolsFQLog printWithNSString:ComFqLibFileHelper_TAG_ withNSString:@"saveFile error"];
    [((JavaLangException *) nil_chk(e)) printStackTrace];
  }
  
#line 188
  return NO;
}


#line 197
+ (NSString *)readStringWithNSString:(NSString *)filePath
                         withBoolean:(BOOL)decode {
  
#line 204
  JavaIoFile *file = [[JavaIoFile alloc] initWithNSString:filePath];
  if (![file exists]) {
    return @"";
  }
  
#line 209
  JavaIoBufferedReader *reader = nil;
  JavaLangStringBuilder *returnString = [[JavaLangStringBuilder alloc] init];
  @try {
    reader = [[JavaIoBufferedReader alloc] initWithJavaIoReader:[[JavaIoInputStreamReader alloc] initWithJavaIoInputStream:[[JavaIoFileInputStream alloc] initWithJavaIoFile:file]]];
    NSString *lineTxt = nil;
    while ((lineTxt = [reader readLine]) != nil) {
      (void) [returnString appendWithNSString:lineTxt];
    }
  }
  @catch (
#line 217
  JavaLangException *e) {
    return @"";
  }
  @finally {
    
#line 220
    @try {
      [((JavaIoBufferedReader *) nil_chk(reader)) close];
    }
    @catch (
#line 222
    JavaLangException *e2) {
    }
  }
  NSString *out = [((NSString *) nil_chk([returnString description])) trim];
  if (decode) {
    out = [ComFqLibPlatformDES3Utils decryptModeWithByteArray:[((NSString *) nil_chk(out)) getBytes] withByteArray:ComFqLibToolsConstants_get_KEY_STRING_()];
  }
  return out;
}

+ (NSString *)readStringWithNSString:(NSString *)path
                        withNSString:(NSString *)name
                         withBoolean:(BOOL)decode {
  
#line 240
  return [ComFqLibFileHelper readStringWithNSString:[NSString stringWithFormat:@"%@/%@", path, name] withBoolean:decode];
}


#line 259
+ (FQJSONArray *)loadDataFileWithNSString:(NSString *)filepath {
  @synchronized([ComFqLibFileHelper getClass]) {
    {
      
#line 261
      FQJSONArray *data = [[FQJSONArray alloc] init];
      @try {
        JavaIoFile *dataFile = [[JavaIoFile alloc] initWithNSString:filepath];
        
#line 265
        if ([dataFile exists]) {
          JavaIoObjectInputStream *ois = [[JavaIoObjectInputStream alloc] initWithJavaIoInputStream:[[JavaIoFileInputStream alloc] initWithJavaIoFile:dataFile]];
          ComFqLibToolsData *localData = (ComFqLibToolsData *) check_class_cast([ois readObject], [ComFqLibToolsData class]);
          [ois close];
          if (localData != nil) {
            data = [[FQJSONArray alloc] initWithNSString:localData->mLocalJson_];
          }
        }
      }
      @catch (
#line 273
      JavaLangException *e) {
        [((JavaLangException *) nil_chk(e)) printStackTrace];
      }
      return data;
    }
  }
}


#line 282
+ (FQJSONObject *)loadJobjDataFileWithNSString:(NSString *)filepath {
  @synchronized([ComFqLibFileHelper getClass]) {
    {
      
#line 284
      FQJSONObject *data = [[FQJSONObject alloc] init];
      @try {
        JavaIoFile *dataFile = [[JavaIoFile alloc] initWithNSString:filepath];
        
#line 288
        if ([dataFile exists]) {
          JavaIoObjectInputStream *ois = [[JavaIoObjectInputStream alloc] initWithJavaIoInputStream:[[JavaIoFileInputStream alloc] initWithJavaIoFile:dataFile]];
          ComFqLibToolsData *localData = (ComFqLibToolsData *) check_class_cast([ois readObject], [ComFqLibToolsData class]);
          [ois close];
          if (localData != nil) {
            data = [[FQJSONObject alloc] initWithNSString:localData->mLocalJson_];
          }
        }
      }
      @catch (
#line 296
      JavaLangException *e) {
        [((JavaLangException *) nil_chk(e)) printStackTrace];
      }
      return data;
    }
  }
}


#line 305
+ (void)saveDataFileWithId:(id)json
              withNSString:(NSString *)filePath {
  @synchronized([ComFqLibFileHelper getClass]) {
    {
      
#line 306
      JavaIoFile *dataFile = [[JavaIoFile alloc] initWithNSString:filePath];
      
#line 308
      ComFqLibToolsData *data = [[ComFqLibToolsData alloc] init];
      data->mLocalJson_ = [nil_chk(json) description];
      @try {
        JavaIoObjectOutputStream *oos = [[JavaIoObjectOutputStream alloc] initWithJavaIoOutputStream:[[JavaIoFileOutputStream alloc] initWithJavaIoFile:dataFile]];
        [oos writeObjectWithId:data];
        [oos close];
      }
      @catch (
#line 314
      JavaIoFileNotFoundException *e) {
        [((JavaIoFileNotFoundException *) nil_chk(e)) printStackTrace];
      }
      @catch (
#line 316
      JavaIoIOException *e) {
        [((JavaIoIOException *) nil_chk(e)) printStackTrace];
      }
    }
  }
}


#line 324
+ (void)saveSerializableObjectWithId:(id)object
                        withNSString:(NSString *)path {
  @synchronized([ComFqLibFileHelper getClass]) {
    {
      
#line 325
      if (ComFqLibToolsConstants_get_TARGET_FOR_IOS_())
#line 326
      return;
      JavaIoFile *parentFile = [[JavaIoFile alloc] initWithNSString:[path substring:0 endIndex:[((NSString *) nil_chk(path)) lastIndexOf:'/']]];
      if (![parentFile exists])
#line 329
      [parentFile mkdirs];
      JavaIoFile *dataFile = [[JavaIoFile alloc] initWithNSString:path];
      if (![dataFile exists]) {
        @try {
          [dataFile createNewFile];
        }
        @catch (
#line 334
        JavaIoIOException *e) {
          [((JavaIoIOException *) nil_chk(e)) printStackTrace];
        }
      }
      JavaIoObjectOutputStream *oos = nil;
      @try {
        oos = [[JavaIoObjectOutputStream alloc] initWithJavaIoOutputStream:[[JavaIoFileOutputStream alloc] initWithJavaIoFile:dataFile]];
        [oos writeObjectWithId:object];
      }
      @catch (
#line 342
      JavaIoIOException *e) {
        [((JavaIoIOException *) nil_chk(e)) printStackTrace];
      }
      @finally {
        
#line 345
        @try {
          [((JavaIoObjectOutputStream *) nil_chk(oos)) close];
        }
        @catch (
#line 347
        JavaIoIOException *e) {
        }
      }
    }
  }
}


#line 355
+ (id)loadSerializableObjectWithNSString:(NSString *)filePath {
  @synchronized([ComFqLibFileHelper getClass]) {
    {
      
#line 356
      if (ComFqLibToolsConstants_get_TARGET_FOR_IOS_())
#line 357
      return nil;
      JavaIoFile *dataFile = [[JavaIoFile alloc] initWithNSString:filePath];
      if ([dataFile exists]) {
        JavaIoObjectInputStream *ois = nil;
        @try {
          ois = [[JavaIoObjectInputStream alloc] initWithJavaIoInputStream:[[JavaIoFileInputStream alloc] initWithJavaIoFile:dataFile]];
          id data = [ois readObject];
          return data;
        }
        @catch (
#line 365
        JavaLangException *e) {
          [((JavaLangException *) nil_chk(e)) printStackTrace];
        }
        @finally {
          
#line 368
          @try {
            if (ois != nil)
#line 370
            [ois close];
          }
          @catch (
#line 371
          JavaIoIOException *e) {
          }
        }
      }
      return nil;
    }
  }
}


#line 381
+ (void)saveTextFileWithNSString:(NSString *)text
                    withNSString:(NSString *)filePath {
  @synchronized([ComFqLibFileHelper getClass]) {
    {
      
#line 382
      JavaIoFile *dataFile = [[JavaIoFile alloc] initWithNSString:filePath];
      @try {
        JavaIoObjectOutputStream *oos = [[JavaIoObjectOutputStream alloc] initWithJavaIoOutputStream:[[JavaIoFileOutputStream alloc] initWithJavaIoFile:dataFile]];
        [oos writeObjectWithId:text];
        [oos close];
      }
      @catch (
#line 387
      JavaIoFileNotFoundException *e) {
        [((JavaIoFileNotFoundException *) nil_chk(e)) printStackTrace];
      }
      @catch (
#line 389
      JavaIoIOException *e) {
        [((JavaIoIOException *) nil_chk(e)) printStackTrace];
      }
    }
  }
}


#line 405
+ (BOOL)saveFileWithByteArray:(IOSByteArray *)bys
                 withNSString:(NSString *)path
                 withNSString:(NSString *)name {
  
#line 406
  JavaIoFile *file = [[JavaIoFile alloc] initWithNSString:[NSString stringWithFormat:@"%@/%@", path, name]];
  JavaIoFile *pathFile = [[JavaIoFile alloc] initWithNSString:path];
  if (![pathFile exists]) {
    [pathFile mkdirs];
  }
  @try {
    JavaIoFileOutputStream *fos = [[JavaIoFileOutputStream alloc] initWithJavaIoFile:file];
    [fos writeWithByteArray:bys];
    [fos flush];
    [fos close];
    return YES;
  }
  @catch (
#line 417
  JavaLangException *e) {
    [ComFqLibToolsFQLog printWithNSString:ComFqLibFileHelper_TAG_ withNSString:@"saveFile error"];
    [((JavaLangException *) nil_chk(e)) printStackTrace];
  }
  return NO;
}


#line 429
+ (NSString *)loadTextFileWithNSString:(NSString *)filePath {
  @synchronized([ComFqLibFileHelper getClass]) {
    {
      
#line 430
      JavaIoFile *dataFile = [[JavaIoFile alloc] initWithNSString:filePath];
      @try {
        JavaIoObjectInputStream *ois = [[JavaIoObjectInputStream alloc] initWithJavaIoInputStream:[[JavaIoFileInputStream alloc] initWithJavaIoFile:dataFile]];
        NSString *str = (NSString *) check_class_cast([ois readObject], [NSString class]);
        [ois close];
        return str;
      }
      @catch (
#line 436
      JavaLangException *e) {
        [((JavaLangException *) nil_chk(e)) printStackTrace];
      }
      return @"";
    }
  }
}


#line 445
+ (void)clearAdCache {
}


#line 457
+ (void)copyFileWithNSString:(NSString *)oldPath
                withNSString:(NSString *)newPath {
  
#line 458
  @try {
    
#line 460
    int byteread = 0;
    JavaIoFile *oldfile = [[JavaIoFile alloc] initWithNSString:oldPath];
    if ([oldfile exists]) {
      JavaIoInputStream *inStream = [[JavaIoFileInputStream alloc] initWithNSString:oldPath];
      JavaIoFileOutputStream *fs = [[JavaIoFileOutputStream alloc] initWithNSString:newPath];
      IOSByteArray *buffer = [IOSByteArray arrayWithLength:1444];
      
#line 467
      while ((byteread = [inStream readWithByteArray:buffer]) != -1) {
        
#line 470
        [fs writeWithByteArray:buffer withInt:0 withInt:byteread];
      }
      [inStream close];
      [ComFqLibFileHelper reNameOneFileWithNSString:newPath];
    }
  }
  @catch (
#line 475
  JavaLangException *e) {
    [((JavaIoPrintStream *) nil_chk(JavaLangSystem_get_out_())) printlnWithNSString:@"\u590d\u5236\u5355\u4e2a\u6587\u4ef6\u64cd\u4f5c\u51fa\u9519"];
    [((JavaLangException *) nil_chk(e)) printStackTrace];
  }
}


#line 482
+ (void)reNameOneFileWithNSString:(NSString *)newPath {
  
#line 483
  JavaIoFile *oldfile = [[JavaIoFile alloc] initWithNSString:newPath];
  JavaIoFile *mNewFile = [[JavaIoFile alloc] initWithNSString:[NSString stringWithFormat:@"%@.png", newPath]];
  BOOL mMoveSuccess = [oldfile renameToWithJavaIoFile:mNewFile];
  if (mMoveSuccess && [oldfile exists]) {
    [oldfile delete__];
  }
}


#line 491
+ (void)reNameFileWithPathWithNSString:(NSString *)newPath {
  
#line 492
  JavaIoFile *mFile = [[JavaIoFile alloc] initWithNSString:newPath];
  IOSObjectArray *files = [mFile listFiles];
  IOSObjectArray *filesNames = [mFile list];
  if ((int) [((IOSObjectArray *) nil_chk(filesNames)) count] > 0) {
    int size = (int) [((IOSObjectArray *) nil_chk([mFile list])) count];
    for (int i = 0; i < size; i++) {
      JavaIoFile *mFile2 = IOSObjectArray_Get(nil_chk(files), i);
      NSString *mNewPath = [NSString stringWithFormat:@"%@.png", [((JavaIoFile *) nil_chk(mFile2)) getAbsolutePath]];
      JavaIoFile *mNewFile = [[JavaIoFile alloc] initWithNSString:mNewPath];
      BOOL mMoveSuccess = [mFile2 renameToWithJavaIoFile:mNewFile];
      if (mMoveSuccess && [mFile2 exists]) {
        [mFile2 delete__];
      }
    }
  }
}

- (id)init {
  return [super init];
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "deleteAllFolderWithNSString:", "deleteAllFolder", "V", 0x1, NULL },
    { "deleteFileWithJavaIoFile:withBoolean:", "deleteFile", "Z", 0x9, NULL },
    { "getFileSizeWithJavaIoFile:", "getFileSize", "J", 0x9, NULL },
    { "copyfileWithJavaIoFile:withJavaIoFile:withJavaLangBoolean:", "copyfile", "V", 0x9, NULL },
    { "saveFileWithJavaIoInputStream:withNSString:withNSString:", "saveFile", "Z", 0x9, NULL },
    { "saveFileWithNSString:withNSString:withBoolean:", "saveFile", "Z", 0x9, NULL },
    { "saveFileWithNSString:withNSString:withNSString:withBoolean:", "saveFile", "Z", 0x9, NULL },
    { "readStringWithNSString:withBoolean:", "readString", "Ljava.lang.String;", 0x9, NULL },
    { "readStringWithNSString:withNSString:withBoolean:", "readString", "Ljava.lang.String;", 0x9, NULL },
    { "loadDataFileWithNSString:", "loadDataFile", "Lcom.fq.lib.json.JSONArray;", 0x29, NULL },
    { "loadJobjDataFileWithNSString:", "loadJobjDataFile", "Lcom.fq.lib.json.JSONObject;", 0x29, NULL },
    { "saveDataFileWithId:withNSString:", "saveDataFile", "V", 0x29, NULL },
    { "saveSerializableObjectWithId:withNSString:", "saveSerializableObject", "V", 0x29, NULL },
    { "loadSerializableObjectWithNSString:", "loadSerializableObject", "Ljava.lang.Object;", 0x29, NULL },
    { "saveTextFileWithNSString:withNSString:", "saveTextFile", "V", 0x29, NULL },
    { "saveFileWithByteArray:withNSString:withNSString:", "saveFile", "Z", 0x9, NULL },
    { "loadTextFileWithNSString:", "loadTextFile", "Ljava.lang.String;", 0x29, NULL },
    { "clearAdCache", NULL, "V", 0x9, NULL },
    { "copyFileWithNSString:withNSString:", "copyFile", "V", 0x9, NULL },
    { "reNameOneFileWithNSString:", "reNameOneFile", "V", 0x9, NULL },
    { "reNameFileWithPathWithNSString:", "reNameFileWithPath", "V", 0x9, NULL },
    { "init", NULL, NULL, 0x1, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "TAG_", NULL, 0x1c, "Ljava.lang.String;", &ComFqLibFileHelper_TAG_,  },
  };
  static J2ObjcClassInfo _ComFqLibFileHelper = { "FileHelper", "com.fq.lib", NULL, 0x1, 22, methods, 1, fields, 0, NULL};
  return &_ComFqLibFileHelper;
}

@end
