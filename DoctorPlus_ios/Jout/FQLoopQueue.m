//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/liaomin/Documents/workspace/Android/DocPlusLogic/src/com/fq/http/async/uploadloop/FQLoopQueue.java
//
//  Created by liaomin on 15-5-4.
//

#line 1 "/Users/liaomin/Documents/workspace/Android/DocPlusLogic/src/com/fq/http/async/uploadloop/FQLoopQueue.java"

#include "FQLoopQueue.h"
#include "java/util/ArrayList.h"


#line 13
@implementation ComFqHttpAsyncUploadloopFQLoopQueue


#line 22
- (id)init {
  if (self = [super init]) {
    
#line 23
    mLock_ = [[NSObject alloc] init];
    
#line 24
    mData_ = [[JavaUtilArrayList alloc] init];
    
#line 25
    mCurrentIndex_ = 0;
  }
  return self;
}


#line 28
- (void)addWithId:(id)object {
  
#line 29
  if (object != nil) {
    @synchronized (mLock_) {
      [((JavaUtilArrayList *) nil_chk(mData_)) addWithId:object];
    }
  }
}


#line 39
- (id)getNext {
  
#line 40
  @synchronized (mLock_) {
    int size = [((JavaUtilArrayList *) nil_chk(mData_)) size];
    if ([mData_ size] > 0) {
      id data = [mData_ getWithInt:mCurrentIndex_++];
      if (mCurrentIndex_ == size)
#line 45
      mCurrentIndex_ = 0;
      return data;
    }
  }
  return nil;
}


#line 53
- (id)removeWithInt:(int)index {
  
#line 54
  @synchronized (mLock_) {
    id data = [((JavaUtilArrayList *) nil_chk(mData_)) removeWithInt:index];
    if (mCurrentIndex_ > 0 && mCurrentIndex_ >= index) {
      mCurrentIndex_--;
    }
    if (mCurrentIndex_ == [mData_ size])
#line 60
    mCurrentIndex_ = 0;
    return data;
  }
}


#line 65
- (BOOL)removeWithId:(id)object {
  
#line 66
  int index = [((JavaUtilArrayList *) nil_chk(mData_)) indexOfWithId:object];
  if (index >= 0) {
    @synchronized (mLock_) {
      BOOL success = [mData_ removeWithId:object];
      if (mCurrentIndex_ > 0 && mCurrentIndex_ >= index) {
        mCurrentIndex_--;
      }
      if (mCurrentIndex_ == [mData_ size])
#line 74
      mCurrentIndex_ = 0;
      return success;
    }
  }
  return NO;
}


#line 81
- (int)size {
  
#line 82
  return [((JavaUtilArrayList *) nil_chk(mData_)) size];
}


#line 85
- (BOOL)isEmpty {
  
#line 86
  return [((JavaUtilArrayList *) nil_chk(mData_)) isEmpty];
}


#line 89
- (JavaUtilArrayList *)getAll {
  
#line 90
  return mData_;
}

- (void)copyAllFieldsTo:(ComFqHttpAsyncUploadloopFQLoopQueue *)other {
  [super copyAllFieldsTo:other];
  other->mCurrentIndex_ = mCurrentIndex_;
  other->mData_ = mData_;
  other->mLock_ = mLock_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "init", "FQLoopQueue", NULL, 0x1, NULL },
    { "addWithId:", "add", "V", 0x1, NULL },
    { "getNext", NULL, "TT;", 0x1, NULL },
    { "removeWithInt:", "remove", "TT;", 0x1, NULL },
    { "removeWithId:", "remove", "Z", 0x1, NULL },
    { "size", NULL, "I", 0x1, NULL },
    { "isEmpty", NULL, "Z", 0x1, NULL },
    { "getAll", NULL, "Ljava.util.ArrayList;", 0x1, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "serialVersionUID_", NULL, 0x1a, "J", NULL, .constantValue.asLong = ComFqHttpAsyncUploadloopFQLoopQueue_serialVersionUID },
    { "mData_", NULL, 0x2, "Ljava.util.ArrayList;", NULL,  },
    { "mLock_", NULL, 0x2, "Ljava.lang.Object;", NULL,  },
    { "mCurrentIndex_", NULL, 0x2, "I", NULL,  },
  };
  static J2ObjcClassInfo _ComFqHttpAsyncUploadloopFQLoopQueue = { "FQLoopQueue", "com.fq.http.async.uploadloop", NULL, 0x1, 8, methods, 4, fields, 0, NULL};
  return &_ComFqHttpAsyncUploadloopFQLoopQueue;
}

@end
