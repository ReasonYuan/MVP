//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/liaomin/Documents/workspace/Android/DocPlusLogic/src/com/fq/lib/tools/Base64Util.java
//
//  Created by liaomin on 15-5-4.
//

#line 1 "/Users/liaomin/Documents/workspace/Android/DocPlusLogic/src/com/fq/lib/tools/Base64Util.java"

#include "Base64Util.h"
#include "IOSPrimitiveArray.h"
#include "java/io/ByteArrayOutputStream.h"
#include "java/lang/StringBuffer.h"

BOOL ComFqLibToolsBase64Util_initialized = NO;


#line 5
@implementation ComFqLibToolsBase64Util

IOSCharArray * ComFqLibToolsBase64Util_base64EncodeChars_;
IOSByteArray * ComFqLibToolsBase64Util_base64DecodeChars_;

- (id)init {
  return [super init];
}


#line 18
+ (NSString *)encodeWithByteArray:(IOSByteArray *)data {
  
#line 19
  JavaLangStringBuffer *sb = [[JavaLangStringBuffer alloc] init];
  int len = (int) [((IOSByteArray *) nil_chk(data)) count];
  int i = 0;
  int b1, b2, b3;
  
#line 24
  while (i < len) {
    b1 = IOSByteArray_Get(data, i++) & (int) 0xff;
    if (i == len) {
      (void) [sb appendWithChar:IOSCharArray_Get(nil_chk(ComFqLibToolsBase64Util_base64EncodeChars_), (int) (((unsigned int) b1) >> 2))];
      (void) [sb appendWithChar:IOSCharArray_Get(ComFqLibToolsBase64Util_base64EncodeChars_, (b1 & (int) 0x3) << 4)];
      (void) [sb appendWithNSString:@"=="];
      break;
    }
    b2 = IOSByteArray_Get(data, i++) & (int) 0xff;
    if (i == len) {
      (void) [sb appendWithChar:IOSCharArray_Get(nil_chk(ComFqLibToolsBase64Util_base64EncodeChars_), (int) (((unsigned int) b1) >> 2))];
      (void) [sb appendWithChar:IOSCharArray_Get(ComFqLibToolsBase64Util_base64EncodeChars_, ((b1 & (int) 0x03) << 4) | ((int) (((unsigned int) (b2 & (int) 0xf0)) >> 4)))];
      (void) [sb appendWithChar:IOSCharArray_Get(ComFqLibToolsBase64Util_base64EncodeChars_, (b2 & (int) 0x0f) << 2)];
      (void) [sb appendWithNSString:@"="];
      break;
    }
    b3 = IOSByteArray_Get(data, i++) & (int) 0xff;
    (void) [sb appendWithChar:IOSCharArray_Get(nil_chk(ComFqLibToolsBase64Util_base64EncodeChars_), (int) (((unsigned int) b1) >> 2))];
    (void) [sb appendWithChar:IOSCharArray_Get(ComFqLibToolsBase64Util_base64EncodeChars_, ((b1 & (int) 0x03) << 4) | ((int) (((unsigned int) (b2 & (int) 0xf0)) >> 4)))];
    (void) [sb appendWithChar:IOSCharArray_Get(ComFqLibToolsBase64Util_base64EncodeChars_, ((b2 & (int) 0x0f) << 2) | ((int) (((unsigned int) (b3 & (int) 0xc0)) >> 6)))];
    (void) [sb appendWithChar:IOSCharArray_Get(ComFqLibToolsBase64Util_base64EncodeChars_, b3 & (int) 0x3f)];
  }
  return [sb description];
}


#line 54
+ (IOSByteArray *)decodeWithNSString:(NSString *)str {
  
#line 55
  IOSByteArray *data = [((NSString *) nil_chk(str)) getBytes];
  int len = (int) [((IOSByteArray *) nil_chk(data)) count];
  JavaIoByteArrayOutputStream *buf = [[JavaIoByteArrayOutputStream alloc] initWithInt:len];
  int i = 0;
  int b1, b2, b3, b4;
  
#line 61
  while (i < len) {
    
#line 64
    do {
      b1 = IOSByteArray_Get(nil_chk(ComFqLibToolsBase64Util_base64DecodeChars_), IOSByteArray_Get(data, i++));
    }
    while (
#line 66
    i < len && b1 == -1);
    if (b1 == -1) {
      break;
    }
    
#line 72
    do {
      b2 = IOSByteArray_Get(nil_chk(ComFqLibToolsBase64Util_base64DecodeChars_), IOSByteArray_Get(data, i++));
    }
    while (
#line 74
    i < len && b2 == -1);
    if (b2 == -1) {
      break;
    }
    [buf writeWithInt:(int) ((b1 << 2) | ((int) (((unsigned int) (b2 & (int) 0x30)) >> 4)))];
    
#line 81
    do {
      b3 = IOSByteArray_Get(data, i++);
      if (b3 == 61) {
        return [buf toByteArray];
      }
      b3 = IOSByteArray_Get(nil_chk(ComFqLibToolsBase64Util_base64DecodeChars_), b3);
    }
    while (
#line 87
    i < len && b3 == -1);
    if (b3 == -1) {
      break;
    }
    [buf writeWithInt:(int) (((b2 & (int) 0x0f) << 4) | ((int) (((unsigned int) (b3 & (int) 0x3c)) >> 2)))];
    
#line 94
    do {
      b4 = IOSByteArray_Get(data, i++);
      if (b4 == 61) {
        return [buf toByteArray];
      }
      b4 = IOSByteArray_Get(nil_chk(ComFqLibToolsBase64Util_base64DecodeChars_), b4);
    }
    while (
#line 100
    i < len && b4 == -1);
    if (b4 == -1) {
      break;
    }
    [buf writeWithInt:(int) (((b3 & (int) 0x03) << 6) | b4)];
  }
  return [buf toByteArray];
}

+ (void)initialize {
  if (self == [ComFqLibToolsBase64Util class]) {
    ComFqLibToolsBase64Util_base64EncodeChars_ = [IOSCharArray arrayWithChars:(unichar[]){
#line 6
      'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '+', '/' } count:64];
      ComFqLibToolsBase64Util_base64DecodeChars_ = [IOSByteArray arrayWithBytes:(char[]){
#line 8
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 62, -1, -1, -1, 63, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, -1, -1, -1, -1, -1, -1, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, -1, -1, -1, -1, -1, -1, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, -1, -1, -1, -1, -1 } count:128];
        ComFqLibToolsBase64Util_initialized = YES;
      }
    }

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "init", "Base64Util", NULL, 0x2, NULL },
    { "encodeWithByteArray:", "encode", "Ljava.lang.String;", 0x9, NULL },
    { "decodeWithNSString:", "decode", "[B", 0x9, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "base64EncodeChars_", NULL, 0x1a, "[C", &ComFqLibToolsBase64Util_base64EncodeChars_,  },
    { "base64DecodeChars_", NULL, 0xa, "[B", &ComFqLibToolsBase64Util_base64DecodeChars_,  },
  };
  static J2ObjcClassInfo _ComFqLibToolsBase64Util = { "Base64Util", "com.fq.lib.tools", NULL, 0x1, 3, methods, 2, fields, 0, NULL};
  return &_ComFqLibToolsBase64Util;
}

@end
