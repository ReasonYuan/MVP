//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/liaomin/Documents/workspace/Android/DocPlusLogic/src/com/fq/halcyon/uilogic/UIAuthLogic.java
//
//  Created by liaomin on 15-5-4.
//

#line 1 "/Users/liaomin/Documents/workspace/Android/DocPlusLogic/src/com/fq/halcyon/uilogic/UIAuthLogic.java"

#include "CertificationStatus.h"
#include "DoctorAuthLogic.h"
#include "IOSPrimitiveArray.h"
#include "UIAuthLogic.h"
#include "java/lang/Integer.h"
#include "java/util/ArrayList.h"


#line 10
@implementation ComFqHalcyonUilogicUIAuthLogic


#line 19
- (void)initTypesWithInt:(int)type {
  
#line 20
  if ([((ComFqHalcyonEntityCertificationStatus *) nil_chk(mAuthStatus_)) getImgs] == nil) {
    if (![((JavaUtilArrayList *) nil_chk(mTypes_)) containsWithId:[JavaLangInteger valueOfWithInt:type]]) [mTypes_ addWithId:[JavaLangInteger valueOfWithInt:type]];
  }
  else {
    
#line 23
    ComFqHalcyonEntityCertificationStatus_AuthImage *img = [mAuthStatus_ getAuthImageByTypeWithInt:type];
    if (img != nil) [((JavaUtilArrayList *) nil_chk(mTypes_)) addWithId:[JavaLangInteger valueOfWithInt:type]];
  }
}


#line 28
- (void)setBmpReadyWithInt:(int)type
               withBoolean:(BOOL)isb {
  
#line 29
  (*IOSBooleanArray_GetRef(nil_chk(mBmps_), type - 1)) = isb;
}


#line 32
- (void)addIfTypeNotExitsWithInt:(int)type {
  
#line 33
  if (![((JavaUtilArrayList *) nil_chk(mTypes_)) containsWithId:[JavaLangInteger valueOfWithInt:type]]) [mTypes_ addWithId:[JavaLangInteger valueOfWithInt:type]];
}


#line 36
- (BOOL)isAllImgReady {
  
#line 37
  return IOSBooleanArray_Get(nil_chk(mBmps_), 0);
}


#line 40
- (void)applyAuthWithComFqHalcyonLogicDoctorAuthLogic_OnRequestAuthCallback:(id<ComFqHalcyonLogicDoctorAuthLogic_OnRequestAuthCallback>)callback {
  
#line 41
  [((ComFqHalcyonLogicDoctorAuthLogic *) nil_chk(certificateLogic_)) applyAuthWithJavaUtilArrayList:mTypes_ withComFqHalcyonLogicDoctorAuthLogic_OnRequestAuthCallback:callback];
}


#line 44
- (JavaUtilArrayList *)getTypes {
  
#line 45
  return mTypes_;
}


#line 48
- (void)dataClear {
  
#line 49
  [((JavaUtilArrayList *) nil_chk(mTypes_)) clear];
}


#line 52
- (int)bmpCount {
  
#line 53
  return [((JavaUtilArrayList *) nil_chk(mTypes_)) size];
}

- (id)init {
  if (self = [super init]) {
    mBmps_ = [IOSBooleanArray arrayWithLength:
#line 13
    3];
    mTypes_ =
#line 14
    [[JavaUtilArrayList alloc] init];
    mAuthStatus_ =
#line 16
    [ComFqHalcyonEntityCertificationStatus getInstance];
    certificateLogic_ =
#line 17
    [[ComFqHalcyonLogicDoctorAuthLogic alloc] init];
  }
  return self;
}

- (void)copyAllFieldsTo:(ComFqHalcyonUilogicUIAuthLogic *)other {
  [super copyAllFieldsTo:other];
  other->certificateLogic_ = certificateLogic_;
  other->mAuthStatus_ = mAuthStatus_;
  other->mBmps_ = mBmps_;
  other->mTypes_ = mTypes_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "initTypesWithInt:", "initTypes", "V", 0x1, NULL },
    { "setBmpReadyWithInt:withBoolean:", "setBmpReady", "V", 0x1, NULL },
    { "addIfTypeNotExitsWithInt:", "addIfTypeNotExits", "V", 0x1, NULL },
    { "isAllImgReady", NULL, "Z", 0x1, NULL },
    { "applyAuthWithComFqHalcyonLogicDoctorAuthLogic_OnRequestAuthCallback:", "applyAuth", "V", 0x1, NULL },
    { "getTypes", NULL, "Ljava.util.ArrayList;", 0x1, NULL },
    { "dataClear", NULL, "V", 0x1, NULL },
    { "bmpCount", NULL, "I", 0x1, NULL },
    { "init", NULL, NULL, 0x1, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "mBmps_", NULL, 0x2, "[Z", NULL,  },
    { "mTypes_", NULL, 0x2, "Ljava.util.ArrayList;", NULL,  },
    { "mAuthStatus_", NULL, 0x2, "Lcom.fq.halcyon.entity.CertificationStatus;", NULL,  },
    { "certificateLogic_", NULL, 0x2, "Lcom.fq.halcyon.logic.DoctorAuthLogic;", NULL,  },
  };
  static J2ObjcClassInfo _ComFqHalcyonUilogicUIAuthLogic = { "UIAuthLogic", "com.fq.halcyon.uilogic", NULL, 0x1, 9, methods, 4, fields, 0, NULL};
  return &_ComFqHalcyonUilogicUIAuthLogic;
}

@end
