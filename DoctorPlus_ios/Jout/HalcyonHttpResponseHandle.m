//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/liaomin/Documents/workspace/Android/DocPlusLogic/src/com/fq/halcyon/HalcyonHttpResponseHandle.java
//
//  Created by liaomin on 15-5-4.
//

#line 1 "/Users/liaomin/Documents/workspace/Android/DocPlusLogic/src/com/fq/halcyon/HalcyonHttpResponseHandle.java"

#include "FileHelper.h"
#include "JSONArray.h"
#include "JSONException.h"
#include "JSONObject.h"
#import "HalcyonHttpResponseHandle.h"


#line 14
@implementation HalcyonHttpResponseHandle


#line 24
- (void)setPathWithNSString:(NSString *)path
               withNSString:(NSString *)name {
  
#line 25
  self->path_ = path;
  self->name_ = name;
}


#line 29
- (BOOL)isLoadCache {
  
#line 30
  return loadCache_;
}


#line 33
- (void)setLoadCacheWithBoolean:(BOOL)loadCache {
  
#line 34
  self->loadCache_ = loadCache;
}

- (void)handleJsonWithFQJSONObject:(FQJSONObject *)json {
  
#line 40
  [self handleJsonWithFQJSONObject:json withBoolean:YES];
}


#line 43
- (void)handleJsonWithFQJSONObject:(FQJSONObject *)json
                       withBoolean:(BOOL)isformNet {
  
#line 44
  int responseCode = [((FQJSONObject *) nil_chk(json)) optIntWithNSString:@"response_code"];
  NSString *msg = [json optStringWithNSString:@"msg"];
  id results = [json optWithNSString:@"results"];
  if (results != nil) {
    if ([results isKindOfClass:[FQJSONObject class]]) {
      [self handleWithInt:responseCode withNSString:msg withInt:1 withId:results];
    }
    else
#line 50
    if ([results isKindOfClass:[FQJSONArray class]]) {
      [self handleWithInt:responseCode withNSString:msg withInt:2 withId:results];
    }
    else {
      
#line 53
      @try {
        [self handleWithInt:responseCode withNSString:msg withInt:1 withId:[[FQJSONObject alloc] initWithNSString:@"{}"]];
      }
      @catch (
#line 55
      FQJSONException *e) {
      }
    }
    if (isformNet && responseCode == 0 && loadCache_) {
      [ComFqLibFileHelper saveFileWithNSString:[json description] withNSString:path_ withNSString:name_ withBoolean:YES];
    }
  }
  else {
    
#line 62
    [self handleWithInt:[json optIntWithNSString:@"response_code"] withNSString:[json optStringWithNSString:@"msg"] withInt:1 withId:json];
  }
}


#line 74
- (void)handleWithInt:(int)responseCode
         withNSString:(NSString *)msg
              withInt:(int)type
               withId:(id)results {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (id)init {
  if (self = [super init]) {
    loadCache_ =
#line 18
    NO;
  }
  return self;
}

- (void)copyAllFieldsTo:(HalcyonHttpResponseHandle *)other {
  [super copyAllFieldsTo:other];
  other->loadCache_ = loadCache_;
  other->name_ = name_;
  other->path_ = path_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "setPathWithNSString:withNSString:", "setPath", "V", 0x1, NULL },
    { "isLoadCache", NULL, "Z", 0x1, NULL },
    { "setLoadCacheWithBoolean:", "setLoadCache", "V", 0x1, NULL },
    { "handleJsonWithFQJSONObject:", "handleJson", "V", 0x1, NULL },
    { "handleJsonWithFQJSONObject:withBoolean:", "handleJson", "V", 0x1, NULL },
    { "handleWithInt:withNSString:withInt:withId:", "handle", "V", 0x401, NULL },
    { "init", NULL, NULL, 0x1, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "HALCYON_HTTP_RESPONSE_CODE_SUCCESS_", NULL, 0x19, "I", NULL, .constantValue.asInt = HalcyonHttpResponseHandle_HALCYON_HTTP_RESPONSE_CODE_SUCCESS },
    { "loadCache_", NULL, 0x4, "Z", NULL,  },
    { "path_", NULL, 0x4, "Ljava.lang.String;", NULL,  },
    { "name_", NULL, 0x4, "Ljava.lang.String;", NULL,  },
  };
  static J2ObjcClassInfo _HalcyonHttpResponseHandle = { "HalcyonHttpResponseHandle", "com.fq.halcyon", NULL, 0x401, 7, methods, 4, fields, 0, NULL};
  return &_HalcyonHttpResponseHandle;
}

@end
